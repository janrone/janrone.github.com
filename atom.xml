<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Janrone's Blog]]></title>
  <link href="http://janrone.github.com/atom.xml" rel="self"/>
  <link href="http://janrone.github.com/"/>
  <updated>2014-04-09T15:30:01+08:00</updated>
  <id>http://janrone.github.com/</id>
  <author>
    <name><![CDATA[Janrone]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[玩具Nexus手机]]></title>
    <link href="http://janrone.github.com/blog/2014/04/09/wan-ju-nexusshou-ji/"/>
    <updated>2014-04-09T15:10:00+08:00</updated>
    <id>http://janrone.github.com/blog/2014/04/09/wan-ju-nexusshou-ji</id>
    <content type="html"><![CDATA[<h2>1.打开手机调试功能，安装ADB，链接电脑。</h2>

<h2>2.shell中直接运行：adb reboot bootloader ，如图：</h2>

<p><img src="http://janrone.github.com/images/post/2014-04-09-01.png" alt="" /></p>

<h2>3. 接着运行： fastboot oem unlock</h2>

<p><img src="http://janrone.github.com/images/post/2014-04-09-02.png" alt="" /></p>

<h2>出现上图，按音量键盘，选择yes ，这时你手机上的所有数据都将被抹去,LOCK STATE将变成unlocked 。</h2>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Anroid试题]]></title>
    <link href="http://janrone.github.com/blog/2013/10/18/anroidshi-ti/"/>
    <updated>2013-10-18T09:17:00+08:00</updated>
    <id>http://janrone.github.com/blog/2013/10/18/anroidshi-ti</id>
    <content type="html"><![CDATA[<p>1，谈谈你对Activity的理解？</p>

<p>对于这种“你对什么什么怎么理解”的面试题，最好的回到方式就是用你自己的理解说出来，通俗中夹杂些专业术语，偶尔再蹦出几个英文。当然如果你很牛X，你可以往深了说，只要别漫无目的的说就行。围绕一条主线。这其中如果你对某一方面比较精通，你就应该往你精通的方向引。面试官可能就会顺着你的思路走了。不过现在有很多面试问Android方面的知识不多，问java方面的比较多。</p>

<p>通俗的讲，Activity就是一个应用程序的门面，也可以理解成就是WEB程序中一个页面，当然与web程序中的页面不同的是，web中的一个页面可能只是一个纯粹的展示页面不与用户进行任何交互，而几乎所有的Activity都会与用户交互。当然两者在架构上也有本质区别，Activity与用户的交互通过触发UI的不同事件完成的。而Web程序是通过请求，响应来完成交互的。还有在android中颠覆了很多常规想法，比如在一个Activity中可以打开另一个不在同一应用的Activity。这在其他程序是不可想象的。当然这种设计的出发点也是为了节省系统资源。从View层的角度来看，Activity承载了与用户交互的不同控件。从控制层看，也就是内部逻辑，Activity需要保持各个界面的状态，背后会做很多持久化的操作。包括妥善管理生命周期的各个阶段。（把生命周期引出来了，没准就会问你这方面的）。</p>

<p>下面是文档式的回答：（最好的回答方式两者结合）</p>

<p>首先Activity是android四大组件之一。它是单独的，作为用户与程序交互的一个载体。几乎所有的Activity都与用户交互。Activity创建了一个窗口，你可以通过setContentView这个方法将需要的UI放置在窗口。任何一个应用程序都可以调用单独的一个Activity。</p>

<p>其次，Activity的继承关系Activity→ContextThemeWrapper→ContextWrapper→Context</p>

<p>最后大部分的Activity的子类都需要实现以下两个接口：</p>

<p>onCreate(Bundle  savedInstanceState)接口是初始化activity的地方. 在这儿通常可以调用setContentView(int)设置在资源文件中定义的UI, 使用findViewById(int) 可以获得UI中定义的窗口.</p>

<p>onPause()接口是使用者准备离开activity的地方，在这儿，任何的修改都应该被提交(通常用于ContentProvider保存数据).</p>

<p>所有Activity必须在清单文件里注册一下才能使用。</p>

<p>2，Activity的生命周期？</p>

<p>在系统中的Activity被一个Activity栈所管理。当一个新的Activity启动时，将被放置到栈顶，成为运行中的Activity，前一个Activity保留在栈中，不再放到前台，直到新的Activity退出为止。</p>

<p>Activity有四种本质区别的状态：</p>

<p>1）在屏幕的前台（Activity栈顶），叫做活动状态或者运行状态（active or running）</p>

<p>2）如果一个Activity失去焦点，但是依然可见（一个新的非全屏的Activity 或者一个透明的Activity 被放置在栈顶），叫做暂停状态（Paused）。一个暂停状态的Activity依然保持活力（保持所有的状态，成员信息，和窗口管理器保持连接），但是在系统内存极端低下的时候将被杀掉。</p>

<p>3）如果一个Activity被另外的Activity完全覆盖掉，叫做停止状态（Stopped）。它依然保持所有状态和成员信息，但是它不再可见，所以它的窗口被隐藏，当系统内存需要被用在其他地方的时候，Stopped的Activity将被杀掉。</p>

<p>4）如果一个Activity是Paused或者Stopped状态，系统可以将该Activity从内存中删除，Android系统采用两种方式进行删除，要么要求该Activity结束，要么直接杀掉它的进程。当该Activity再次显示给用户时，它必须重新开始和重置前面的状态。</p>

<p>Activity提供了7个生命周期方法：</p>

<p>onCreate(),onStart(),onResume(),onPause(),onStop(),onDestory(),onRestart()。在这七个生命周期方法中有三个关键的循环。其实官方给的那张图画得很明白，但估计很少人能有耐心去揣摩。那就换种方式展现。看图吧：</p>

<p>1）以下该图呈现了一个Activity完整的生命周期，从onCreate(Bundle)开始到onDestroy()结束。Activity在onCreate()设置所有的“全局”状态，在onDestory()释放所有的资源。</p>

<p>首先我们运行程序，这是打开MainActivity依次调用onCreate->onStart->onResume，这时MainActivity在栈顶，与我们交互的Activity都在栈顶。然后我按下返回键，则会依次调用onPause->onStop->onDestory。这属于一个完整的生命周期。</p>

<p>2）可见的生命周期，从onStart()开始到onStop()结束。说白了就是一个Activity被另一个activity完全覆盖掉，然后又重新回到前台这个一个过程称之为可见生命周期。</p>

<p>首先我们打开OtherActivity这个窗口。此时MainActivity将被覆盖掉。则会依次调用onPause->onStop。在内存不足的时候，系统也会杀死MainActivity进程。</p>

<p>然后，按下返回键，MainActivity又回到前台此时会调用onRestart->onStart->onResume。</p>

<p>3）前台的生命周期，从onResume()开始到onPause()结束。在这段时间里，该Activity处于所有Activity的最前面，和用户进行交互。Activity可以经常性地在resumed和paused状态之间切换。说白了就是一个Activity覆盖到另一个Activity上面，但是并没有完全覆盖掉。</p>

<p>首先，我们将OtherActivity打开，这是OtherActivity以对话框模式打开，悬浮在MainActivity上面。直接调用的onPause()。</p>

<p>然后我们按下返回键，则调用的onResume。对于这种没用完全覆盖的状态只会在onPause与onResume两个方法之间切换。</p>

<p>注：还有一种特殊情况，当屏幕发生改变的时候生命周期是怎样的呢？比如由竖屏调整为横屏。生命周期的方法依次用：onPause->onStop->onDestroy->onCreate->onStart->onResume。这么一个过程。它会销毁掉原先的activity，重新创建。</p>

<p>3，Acitvity启动模式？</p>

<p>对于这种题，最后就是自己写个例子，观察一下，才能真正明白。</p>

<p>Activty启动提供了四种启动模式。launchMode:</p>

<p>standard:每次启动新的活动窗口(new操作)</p>

<p>singleTop:如果在栈顶是目标活动,则直接打开.否则开启新的活动窗口(new).</p>

<p>singleTask和singleInstance基本上相同.差别在于若根活动设置为singleTask时,则由此所开启的活动也在同一任务中，即taskId相同。.而若根活动设置为singleInstance时,由此开启的活动在新的任务中.即栈中只有一个活动，taskid不同。.其余情况相同.</p>

<p>4，在onCreate方法中Bundle savedInstanceState 这个参数有什么作用？</p>

<p>在onCreate方法中有saveInstanceState这个参数，其实这个参数对应两个方法。</p>

<p>void onSaveInstanceState(Bundle outState)；void onRestoreInstanceState(Bundle savedInstanceState)。当某个activity变得“容易”被系统销毁时，说白了就是系统在内存不足或者其他异常情况下把你的Activity销毁时，将调用这个方法。需要注意的是它是系统调用的，并且你的Activity是被动得被销毁。你可以在销毁的时候保存一下数据。然后在onCreate方法中拿出来。那什么情况下能触发这两个方法呢？</p>

<p>1）、当用户按下HOME键时。</p>

<p>这是显而易见的，系统不知道你按下HOME后要运行多少其他的程序，自然也不知道activity A是否会被销毁，故系统会调用onSaveInstanceState，让用户有机会保存某些非永久性的数据。以下几种情况的分析都遵循该原则</p>

<p>2）、长按HOME键，选择运行其他的程序时。</p>

<p>3）、按下电源按键（关闭屏幕显示）时。</p>

<p>4）、从activity A中启动一个新的activity时。</p>

<p>5）、屏幕方向切换时，例如从竖屏切换到横屏时。</p>

<p>在屏幕切换之前，系统会销毁activity A，在屏幕切换之后系统又会自动地创建activity A，所以onSaveInstanceState一定会被执行</p>

<p>总而言之，onSaveInstanceState的调用遵循一个重要原则，即当系统“未经你许可”时销毁了你的activity，则onSaveInstanceState会被系统调用，这是系统的责任，因为它必须要提供一个机会让你保存你的数据（当然你不保存那就随便你了）。</p>

<p>至于onRestoreInstanceState方法，需要注意的是，onSaveInstanceState方法和onRestoreInstanceState方法“不一定”是成对的被调用的，onRestoreInstanceState被调用的前提是，activity A“确实”被系统销毁了，而如果仅仅是停留在有这种可能性的情况下，则该方法不会被调用，例如，当正在显示activity A的时候，用户按下HOME键回到主界面，然后用户紧接着又返回到activity A，这种情况下activity A一般不会因为内存的原因被系统销毁，故activity A的onRestoreInstanceState方法不会被执行</p>

<p>另外，onRestoreInstanceState的bundle参数也会传递到onCreate方法中，你也可以选择在onCreate方法中做数据还原。</p>

<p>5，谈谈你对BroadCastRceiver的理解？</p>

<p>广播接收者，android四大组件之一，也是唯一一个能动态注册的组件。</p>

<p>1）广播接收者是一个专注于接收广播通知信息，并做出对应处理的组件。很多广播是源自于系统──比如，通知时区改变、电池电量低、拍摄了一张照片或者用户改变了语言选项。应用程序也可以进行广播──比如说，通知其它应用程序一些数据下载完成并处于可用状态。</p>

<p>2）应用程序可以拥有任意数量的广播接收者以对所有它感兴趣的通知信息予以响应。所有的接收器均继承自BroadcastReceiver基类。</p>

<p>3）广播接收者没有用户界面。然而，它们可以启动一个activity来响应它们收到的信息，或者用NotificationManager来通知用户。通知可以用很多种方式来吸引用户的注意力──闪动背灯、震动、播放声音等等。一般来说是在状态栏上放一个持久的图标，用户可以打开它并获取消息。</p>

<p>6，广播分几种？他们有什么区别？</p>

<p>广播被分为两种不同的类型：“普通广播（Normal broadcasts）”和“有序广播（Ordered broadcasts）”。普通广播是完全异步的，可以在同一时刻（逻辑上）被所有接收者接收到，消息传递的效率比较高，但缺点是：接收者不能将处理结果传递给下一个接收者，并且无法终止广播Intent的传播。</p>

<pre><code>然而有序广播是按照接收者声明的优先级别，被接收者依次接收广播。如：A的级别高于B,B的级别高于C,那么，广播先传给A，再传给B，最后传给C 。优先级别声明在intent-filter 元素的android:priority 属性中，数越大优先级别越高,取值范围:-1000到1000，优先级别也可以调用IntentFilter对象的setPriority()进行设置。有序广播的接收者可以终止广播Intent的传播，广播Intent的传播一旦终止，后面的接收者就无法接收到广播。
</code></pre>

<p>   另外，有序广播的接收者可以将数据传递给下一个接收者，如：A得到广播后，可以往它的结果对象中存入数据，当广播传给B时,B可以从A的结果对象中得到A存入的数据。</p>

<p>   Context.sendBroadcast()</p>

<p>发送的是普通广播，所有订阅者都有机会获得并进行处理。</p>

<p>   Context.sendOrderedBroadcast()</p>

<p>发送的是有序广播，系统会根据接收者声明的优先级别按顺序逐个执行接收者，</p>

<p> 前面的接收者有权终止广播(BroadcastReceiver.abortBroadcast())，如果广播被前面的接收者终止，后面的接收者就再也无法获取到广播。对于有序广播，前面的接收者可以将数据通过setResultExtras(Bundle)方法存放进结果对象，然后传给下一个接收者，下一个接收者通过代码：Bundle bundle = getResultExtras(true))可以获取上一个接收者存入在结果对象中的数据。</p>

<p>7，广播的生命周期？</p>

<p>广播的生命周期是非常短的，当发送之后intent会到AndroidManifest.xml文件中找是不是有匹配的action，如果有就会调用Receiver ，然后获得Receiver 对象，再执行onReceive方法，这时候Receiver对象就没有用了，当我们再次点击按钮的时候就会重新获得对象，这就是BroadcastReceiver的生命周期.</p>

<p>在BroadcastReceiver里不能做一些比较耗时的操作,否侧会弹出ANR(Application No</p>

<p>Response)的对话框.</p>

<p>如果需要完成一项比较耗时的工作,应该通过发送Intent给Service,由Service来完成.这里不能使用子线程来解决,因为BroadcastReceiver的生命周期很短,子线程可能还没有结束，BroadcastReceiver就先结束了.BroadcastReceiver一旦结束,此时BroadcastReceiver的所在进程很容易在系统需要内存时被优先杀死,因为它属于空进程(没有任何活动组件的进程).如果它的宿主进程被杀死,那么正在工作的子线程也会被杀死.所以采用子线程来解决是不可靠的.</p>

<p>8，两种注册BroadcastReceiver的方法？</p>

<p>使用在manifest中注册的方法注册BroadcastReceiver，即使你的应用程序没有启动，或者已经被关闭，这个BroadcastReceiver依然会继续运行，这样的运行机制可能会给软件的用户造成困扰。所以作为程序的开发者，我们希望能够有一种灵活的机制完成BroadcastReceiver的绑定和解除绑定操作。Android当然也考虑到了这些问题，所以在Context这个类当中提供了如下两个函数可以在代码中注册：</p>

<p>i. registerReceiver(receiver,filter);</p>

<pre><code>这个函数的作用就是将一个BroadcastReceiver注册到应用程序当中，这个函数接收两个参数，第一个参数是需要注册的BroadcastReceiver对象，第二个是一个IntentFilter。第一个参数是非常容易理解的，第二个参数的作用是定义了哪些Intent才能触发这个注册的BroadcastReceiver对象。
</code></pre>

<p>ii. unregisterReceiver(receiver);</p>

<pre><code>这个方法就非常的简单了，用于解除BroadcastReceiver的绑定状态。一旦解除完成，响应的BroadcastReceiver就不会再接收系统所广播的Intent了。
</code></pre>

<p>两种注册BroadcastReceiver的方法</p>

<p>  1.在应用程序的代码中进行注册</p>

<p>   注册BroadcastReceiver</p>

<pre><code>registerReceiver（receiver,filter）;
</code></pre>

<p>   取消注册BroadcastReceiver</p>

<pre><code>unregisterReceiver（receiver);
</code></pre>

<p>  2.在AndroidManifest.xml当中进行注册</p>

<p>   <receiver android:name="SMSReceiver"></p>

<pre><code>&lt;intent-filter&gt;

 &lt;action android:name="android.provider.Telephony.SMS_RECEIVED" /&gt;

&lt;/intent-filter&gt;
</code></pre>

<p>   </receiver></p>

<p>两种注册BroadcastReceiver方法的比较：</p>

<p>现在我们了解了两种注册BroadcastReceiver的方法之后，需要考虑一下这两种方法适用的场合：</p>

<p>i. 第一种注册的方法可以保证在应用程序安装之后，BroadcastReceiver始终处于活动状态，通常用于监听系统状态的改变，比如说手机的电量，wifi网卡的状态（当然，监视这些东西也是取决于软件的需求）。对于这样的BroadcastReceiver，通常是在产生某个特定的系统事件之后，进行相应的操作，比如说wifi网卡打开时，给用户一个提示；</p>

<p>ii. 第二种注册方法相对第一种要灵活的多，这样注册的BroadcastReceiver通常用于更新UI的状态。一般来说，都是在一个Activity启动的时候使用这样的方法注册BroadcastReceiver，一旦接收到广播的事件，就可以在onReceive方法当中更新当前的这个Activity当中的控件。但是需要注意的是如果这个Activity不可见了，就应该调用unregisterReceiver方法来解除注册</p>

<p>9，粘性广播有什么作用？怎么使用？</p>

<p>粘性广播主要为了解决，在发送完广播之后，动态注册的接收者，也能够收到广播。举个例子首先发送一广播，我的接收者是通过程序中的某个按钮动态注册的。如果不是粘性广播，我注册完接收者肯定无法收到广播了。这是通过发送粘性广播就能够在我动态注册接收者后也能收到广播。</p>

<p>用法：</p>

<p>//发送粘性广播</p>

<p>Public void sendStickyBroadCast(){</p>

<pre><code>    Intent intent=new Intent();
</code></pre>

<p>intent.setAction(“com.iteye.myreceiver.action”);</p>

<p>intent.putExtra(“name”,”tom”);</p>

<p>this.sendStickyBroadCast(intent);</p>

<p>}</p>

<p>发送粘性广播还需要发送粘性广播的权限：<uses-permission android:name="android.permission.BROADCAST_STICKY" /></p>

<p>//动态注册广播接收者</p>

<p>MyReceiver mr = new MyReceiver ();</p>

<p>IntentFilter filter = new IntentFilter();</p>

<p>filter.addAction(&#8220;com.iteye.myreceiver.action &#8220;);</p>

<p>filter.addCategory(Intent.CATEGORY_DEFAULT);</p>

<p>Intent ii = this.registerReceiver(mr, filter);</p>

<p>String n = ii.getStringExtra(&#8220;name&#8221;);</p>

<p>Toast.makeText(this, &#8220;动态注册接收者完成,收到粘性广播,name=&#8221; + n, 1).show();</p>

<p>10，如何控制接收者或者发送方得权限？</p>

<pre><code>   1）如果广播发送方要求接收方必须有某个权限才能收到广播怎么做呢？

   /**

    * 发送广播,指定接收者权限

    * sendBroadcast(i, "com.iteye.permission.receiver");//指定接收者权限

    */

   public void sendBroadcast() {

          //隐式意图,发送广播

          Intent i = new Intent();

          i.setAction("com.iteye.receiver.action");

          i.putExtra("name", "tom");

          this.sendBroadcast(i, " com.iteye.permission.receiver ");

          Log.i("Other",".send ok!");

   }

   在清单文件里receiver必须有这个权限才能收到广播。

   首先，需要定义权限：&lt;permission android:name=" com.iteye.permission.receiver " /&gt;

   然后，声明权限：&lt;uses-permission android:name=" com.iteye.permission.receiver " /&gt;

   这时接收者就能收到发送的广播。

   2）反过来，如果接收者要求发送方必须拥有某个权限，我才接收你的广播怎么办呢？

   &lt;!-- 注册广播接收者

           android:permission:控制发送方需要具备指定权限,才接收其广播.

--&gt;

 &lt;receiver android:name=".MyReceiver" android:permission="com.permission.sender"&gt;

           &lt;intent-filter android:priority="100"&gt;

                  &lt;action android:name="com.iteye.receiver.action" /&gt;

                  &lt;category android:name="android.intent.category.DEFAULT" /&gt;

           &lt;/intent-filter&gt;

  &lt;/receiver&gt;

   即使过滤器匹配，如果发送方没有相应权限，接收者也不会接收其广播
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Anroid应用自动打包]]></title>
    <link href="http://janrone.github.com/blog/2013/05/23/anroidying-yong-zi-dong-da-bao/"/>
    <updated>2013-05-23T20:37:00+08:00</updated>
    <id>http://janrone.github.com/blog/2013/05/23/anroidying-yong-zi-dong-da-bao</id>
    <content type="html"><![CDATA[<h3>1.创建一个Android项</h3>

<pre><code>android create project -k com.android.hello -a hello -t 1 -p ~/Download/Hello 

结果：
Created project directory: /Users/povol/Download/Hello
Created directory /Users/povol/Download/Hello/src/com/android/hello
Added file /Users/povol/Download/Hello/src/com/android/hello/hello.java
Created directory /Users/povol/Download/Hello/res
Created directory /Users/povol/Download/Hello/bin
Created directory /Users/povol/Download/Hello/libs
Created directory /Users/povol/Download/Hello/res/values
Added file /Users/povol/Download/Hello/res/values/strings.xml
Created directory /Users/povol/Download/Hello/res/layout
Added file /Users/povol/Download/Hello/res/layout/main.xml
Added file /Users/povol/Download/Hello/AndroidManifest.xml
Added file /Users/povol/Download/Hello/build.xml
Added file /Users/povol/Download/Hello/proguard-project.txt
</code></pre>

<p>参数说明：-k /&#8211;package 为命名空间（包名）-a /&#8211;name 工程名  -t 为目标平台的版本编号 -p /&#8211;path 项目路径</p>

<p>列出 -t：target id，可以如命令：android list targets , Hello项目使用得id为1。</p>

<pre><code>    Available Android targets:
----------
id: 1 or "android-8"
     Name: Android 2.2
    Type: Platform
    API level: 8
    Revision: 3
    Skins: HVGA, QVGA, WQVGA400, WQVGA432, WVGA800 (default), WVGA854
    ABIs : armeabi
----------
id: 2 or "Google Inc.:Google APIs:8"
    Name: Google APIs
    Type: Add-On
    Vendor: Google Inc.
    Revision: 2
    Description: Android + Google APIs
    Based on Android 2.2 (API level 8)
    Libraries:
    * com.google.android.maps (maps.jar)
        API for Google Maps
    Skins: WVGA854, WQVGA400, HVGA, WQVGA432, WVGA800 (default), QVGA
    ABIs : armeabi
----------
</code></pre>

<!--more-->


<p></p>

<h3>2.已有项目更新</h3>

<p>对已经存在的Android工程,可以update下（修改平台的版本）,这样会自动添加build.xml 等ant 的配置文件</p>

<pre><code>android update project -n Hello -t 2 -p ~/Download/Hello
</code></pre>

<p>参数说明：－n 项目名称  －t target id －p 项目路径</p>

<h5>以上命令你要在android sdk tools的目录下。</h5>

<h3>3.配置 ant.properties</h3>

<pre><code>key.store=hello.keystroe
key.store.password=helloworld
key.alias=hello.keystroe
key.alias.password=helloworld
</code></pre>

<p>要发布Adnroid应用，需要给apk签名，前提需要是有keystore，在这使用命令生产，你也可以用其他方式。</p>

<h3>4.生产keystore</h3>

<p>需要用得keytool，这个安装完了java sdk 就会有的。</p>

<pre><code>povolmatoMacBook-Pro:Hello povol$ keytool -genkey -alias hello.keystore -keyalg RSA -   validity 25 -keystore hello.keystroe
Enter keystore password:  
Re-enter new password: 
What is your first and last name?
[Unknown]:  hello world
What is the name of your organizational unit?
[Unknown]:  hello world
What is the name of your organization?
[Unknown]:  hello world
What is the name of your City or Locality?
[Unknown]:  cn
What is the name of your State or Province?
[Unknown]:  bj
What is the two-letter country code for this unit?
[Unknown]:  cn
Is CN=hello world, OU=hello world, O=hello world, L=cn, ST=bj, C=cn correct?
[no]:  Y

Enter key password for &lt;hello.keystore&gt;
(RETURN if same as keystore password):  
Re-enter new password: 
povolmatoMacBook-Pro:Hello povol$ 
</code></pre>

<p>在Hello目录下生成了 hello.keystroe 。<br/>
<img src="http://janrone.github.com/images/post/2013-05-23-20-21-56.png" alt="" /></p>

<h3>5.编译</h3>

<pre><code>ant relase

povolmatoMacBook-Pro:Hello povol$ ant release
Buildfile: /Users/povol/Download/Hello/build.xml

-set-mode-check:

-set-release-mode:

-release-obfuscation-check:
    [echo] proguard.config is ${proguard.config}

-pre-build:

-check-env:
[checkenv] Android SDK Tools Revision 21.1.0
[checkenv] Installed at /Users/povol/myapp/android-sdk-macosx

-setup:
    [echo] Project Name: Hello
[gettype] Project Type: Application

-build-setup:
    [echo] Resolving Build Target for Hello...
[gettarget] Project Target:   Google APIs
[gettarget] Vendor:           Google Inc.
[gettarget] Platform Version: 2.2
[gettarget] API level:        8
[gettarget] WARNING: No minSdkVersion value set. Application will install on all Android    versions.
    [echo] ----------
    [echo] Creating output directories if needed...
    [mkdir] Created dir: /Users/povol/Download/Hello/bin
    [mkdir] Created dir: /Users/povol/Download/Hello/bin/res
    [mkdir] Created dir: /Users/povol/Download/Hello/gen
    [mkdir] Created dir: /Users/povol/Download/Hello/bin/classes
    [mkdir] Created dir: /Users/povol/Download/Hello/bin/dexedLibs
    [echo] ----------
    [echo] Resolving Dependencies for Hello...
[dependency] Library dependencies:
[dependency] No Libraries
[dependency] 
[dependency] ------------------
[dependency] API&lt;=15: Adding annotations.jar to the classpath.
    [echo] ----------
    [echo] Building Libraries with 'release'...
[subant] No sub-builds to iterate on

-code-gen:
[mergemanifest] Merging AndroidManifest files into one.
[mergemanifest] Manifest merger disabled. Using project manifest only.
    [echo] Handling aidl files...
    [aidl] No AIDL files to compile.
    [echo] ----------
    [echo] Handling RenderScript files...
[renderscript] No RenderScript files to compile.
    [echo] ----------
    [echo] Handling Resources...
    [aapt] Generating resource IDs...
    [echo] ----------
    [echo] Handling BuildConfig class...
[buildconfig] Generating BuildConfig class.

-pre-compile:

-compile:
    [javac] Compiling 3 source files to /Users/povol/Download/Hello/bin/classes

-post-compile:

-obfuscate:

-dex:
    [dex] input: /Users/povol/Download/Hello/bin/classes
    [dex] input: /Users/povol/myapp/android-sdk-macosx/tools/support/annotations.jar
    [dex] Pre-Dexing /Users/povol/myapp/android-sdk-macosx/tools/support/annotations.jar -&gt; annotations-18bac9ff24ac0be23db54c4d77951e76.jar
    [dex] Converting compiled files and external libraries into /Users/povol/Download/Hello/bin/classes.dex...
    [dx] Merged dex A (6 defs/1.8KiB) with dex B (2 defs/1.1KiB). Result is 8 defs/2.8KiB. Took 0.0s

-crunch:
[crunch] Crunching PNG Files in source dir: /Users/povol/Download/Hello/res
[crunch] To destination dir: /Users/povol/Download/Hello/bin/res
[crunch] Crunched 0 PNG files to update cache

-package-resources:
 [aapt] Creating full resource package...

-package:
[apkbuilder] Current build type is different than previous build: forced apkbuilder run.
[apkbuilder] Creating Hello-release-unsigned.apk for release...

-post-package:

-release-prompt-for-password:

-release-nosign:

-release-sign:
    [echo] Signing final apk...
[zipalign] Running zip align on final apk...
    [echo] Release Package: /Users/povol/Download/Hello/bin/Hello-release.apk
[propertyfile] Creating new property file: /Users/povol/Download/Hello/bin/build.prop
[propertyfile] Updating property file: /Users/povol/Download/Hello/bin/build.prop
[propertyfile] Updating property file: /Users/povol/Download/Hello/bin/build.prop
[propertyfile] Updating property file: /Users/povol/Download/Hello/bin/build.prop

-post-build:

release:

BUILD SUCCESSFUL
Total time: 4 seconds
povolmatoMacBook-Pro:Hello povol$ 
</code></pre>

<p>至此，编译成功。</p>

<p><img src="http://janrone.github.com/images/post/2013-05-23-20-21-55.png" alt="" /></p>

<h3>6.安装运行</h3>

<p>结果：<br/>
 <img src="http://janrone.github.com/images/post/2013-05-23-20-21-57.png" alt="" /></p>

<h4>签名参考 Signing Your Applications  <a href="http://developer.android.com/tools/publishing/app-signing.html">http://developer.android.com/tools/publishing/app-signing.html</a></h4>

<h4>附：keytool用法：</h4>

<pre><code>  -certreq     [-v] [-protected]
               [-alias &lt;别名&gt;] [-sigalg &lt;sigalg&gt;]
               [-file &lt;csr_file&gt;] [-keypass &lt;密钥库口令&gt;]
               [-keystore &lt;密钥库&gt;] [-storepass &lt;存储库口令&gt;]
               [-storetype &lt;存储类型&gt;] [-providername &lt;名称&gt;]
               [-providerclass &lt;提供方类名称&gt; [-providerarg &lt;参数&gt;]] ...
               [-providerpath &lt;路径列表&gt;]

  -changealias [-v] [-protected] -alias &lt;别名&gt; -destalias &lt;目标别名&gt;
               [-keypass &lt;密钥库口令&gt;]
               [-keystore &lt;密钥库&gt;] [-storepass &lt;存储库口令&gt;]
               [-storetype &lt;存储类型&gt;] [-providername &lt;名称&gt;]
               [-providerclass &lt;提供方类名称&gt; [-providerarg &lt;参数&gt;]] ...
               [-providerpath &lt;路径列表&gt;]

  -delete      [-v] [-protected] -alias &lt;别名&gt;
               [-keystore &lt;密钥库&gt;] [-storepass &lt;存储库口令&gt;]
               [-storetype &lt;存储类型&gt;] [-providername &lt;名称&gt;]
               [-providerclass &lt;提供方类名称&gt; [-providerarg &lt;参数&gt;]] ...
               [-providerpath &lt;路径列表&gt;]

  -exportcert  [-v] [-rfc] [-protected]
               [-alias &lt;别名&gt;] [-file &lt;认证文件&gt;]
               [-keystore &lt;密钥库&gt;] [-storepass &lt;存储库口令&gt;]
               [-storetype &lt;存储类型&gt;] [-providername &lt;名称&gt;]
               [-providerclass &lt;提供方类名称&gt; [-providerarg &lt;参数&gt;]] ...
               [-providerpath &lt;路径列表&gt;]

  -genkeypair  [-v] [-protected]
               [-alias &lt;别名&gt;]
               [-keyalg &lt;keyalg&gt;] [-keysize &lt;密钥大小&gt;]
               [-sigalg &lt;sigalg&gt;] [-dname &lt;dname&gt;]
               [-validity &lt;valDays&gt;] [-keypass &lt;密钥库口令&gt;]
               [-keystore &lt;密钥库&gt;] [-storepass &lt;存储库口令&gt;]
               [-storetype &lt;存储类型&gt;] [-providername &lt;名称&gt;]
               [-providerclass &lt;提供方类名称&gt; [-providerarg &lt;参数&gt;]] ...
               [-providerpath &lt;路径列表&gt;]

  -genseckey   [-v] [-protected]
               [-alias &lt;别名&gt;] [-keypass &lt;密钥库口令&gt;]
               [-keyalg &lt;keyalg&gt;] [-keysize &lt;密钥大小&gt;]
               [-keystore &lt;密钥库&gt;] [-storepass &lt;存储库口令&gt;]
               [-storetype &lt;存储类型&gt;] [-providername &lt;名称&gt;]
               [-providerclass &lt;提供方类名称&gt; [-providerarg &lt;参数&gt;]] ...
               [-providerpath &lt;路径列表&gt;]

  -help

  -importcert  [-v] [-noprompt] [-trustcacerts] [-protected]
               [-alias &lt;别名&gt;]
               [-file &lt;认证文件&gt;] [-keypass &lt;密钥库口令&gt;]
               [-keystore &lt;密钥库&gt;] [-storepass &lt;存储库口令&gt;]
               [-storetype &lt;存储类型&gt;] [-providername &lt;名称&gt;]
               [-providerclass &lt;提供方类名称&gt; [-providerarg &lt;参数&gt;]] ...
               [-providerpath &lt;路径列表&gt;]

  -importkeystore [-v]
               [-srckeystore &lt;源密钥库&gt;] [-destkeystore &lt;目标密钥库&gt;]
               [-srcstoretype &lt;源存储类型&gt;] [-deststoretype &lt;目标存储类型&gt;]
               [-srcstorepass &lt;源存储库口令&gt;] [-deststorepass &lt;目标存储库口令&gt;]
               [-srcprotected] [-destprotected]
               [-srcprovidername &lt;源提供方名称&gt;]
               [-destprovidername &lt;目标提供方名称&gt;]
               [-srcalias &lt;源别名&gt; [-destalias &lt;目标别名&gt;]
                 [-srckeypass &lt;源密钥库口令&gt;] [-destkeypass &lt;目标密钥库口令&gt;]]
               [-noprompt]
               [-providerclass &lt;提供方类名称&gt; [-providerarg &lt;参数&gt;]] ...
               [-providerpath &lt;路径列表&gt;]

  -keypasswd   [-v] [-alias &lt;别名&gt;]
               [-keypass &lt;旧密钥库口令&gt;] [-new &lt;新密钥库口令&gt;]
               [-keystore &lt;密钥库&gt;] [-storepass &lt;存储库口令&gt;]
               [-storetype &lt;存储类型&gt;] [-providername &lt;名称&gt;]
               [-providerclass &lt;提供方类名称&gt; [-providerarg &lt;参数&gt;]] ...
               [-providerpath &lt;路径列表&gt;]

  -list        [-v | -rfc] [-protected]
               [-alias &lt;别名&gt;]
               [-keystore &lt;密钥库&gt;] [-storepass &lt;存储库口令&gt;]
               [-storetype &lt;存储类型&gt;] [-providername &lt;名称&gt;]
               [-providerclass &lt;提供方类名称&gt; [-providerarg &lt;参数&gt;]] ...
               [-providerpath &lt;路径列表&gt;]

  -printcert   [-v] [-file &lt;认证文件&gt;]

  -storepasswd [-v] [-new &lt;新存储库口令&gt;]
               [-keystore &lt;密钥库&gt;] [-storepass &lt;存储库口令&gt;]
               [-storetype &lt;存储类型&gt;] [-providername &lt;名称&gt;]
               [-providerclass &lt;提供方类名称&gt; [-providerarg &lt;参数&gt;]] ...
               [-providerpath &lt;路径列表&gt;]
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Think Python]]></title>
    <link href="http://janrone.github.com/blog/2013/04/14/think-python/"/>
    <updated>2013-04-14T20:18:00+08:00</updated>
    <id>http://janrone.github.com/blog/2013/04/14/think-python</id>
    <content type="html"><![CDATA[<h2>Chapter 1</h2>

<h2><em>The way of the program</em></h2>

<h3>1. The Python programming language</h3>

<ul>
<li>Python is an example of a <strong>high-level language</strong> .</li>
<li>There are also <strong>low-level language</strong>.</li>
<li>Computers can only run programs writter in low-level-language. So program written in a high-level language have to be processed before the can run .</li>
<li>Two kinds of programs preocess high-level language into low-level languages:<strong>interpreters</strong> and <strong>compilers</strong>.</li>
<li>Python is considered an interpreted language because Python programs are executed by an interpreter.</li>
</ul>


<h3>2. What is a program ?</h3>

<ul>
<li><p>A <strong>program</strong> is a sequence of instrucations that specifies how to preform a computation.</p>

<p>  base instrucations</p>

<pre><code>  input 
  output
  math
  conditionan execution
  repetition
</code></pre>

<p>  algorithms.</p>

<p>  <!--more--></p></li>
</ul>


<h3>3. What is debugging ?</h3>

<p>Program errors are called  <strong>bugs</strong> and the process of tracking the down is callede <strong>debugging</strong>.<br/>
Three kinds of errors can occur in a program:</p>

<ul>
<li>Syntax errors.</li>
<li>Runtime errors.</li>
<li>Semantic errors.</li>
</ul>


<h3>4. Formal and natural languages</h3>

<ul>
<li>Natural languages are the language people speak.</li>
<li>Formal languages are language the are designed by people for specific applications.<br/>
  <strong>Programming languages are formal languages that have been designed to express computations.</strong></li>
</ul>


<h3>5. The first program</h3>

<p>In Python 3 , display the words &#8220;Hello World !&#8221;</p>

<pre><code>&gt;&gt;&gt; print('Hello World!')
Hello world
&gt;&gt;&gt; 
</code></pre>

<h2>Chapter 2</h2>

<h2><em>Variables, expressions and statements</em></h2>

<h3>1. Valuse and types</h3>

<p>if you are not sure what type a values has,  the interpreter can tell you.</p>

<pre><code>&gt;&gt;&gt; type('Hello Hoo')
&lt;type 'str'&gt;
&gt;&gt;&gt; type('2')
&lt;type 'str'&gt;
&gt;&gt;&gt; type(2)
&lt;type 'int'&gt;
&gt;&gt;&gt; type(2.222)
&lt;type 'float'&gt;
&gt;&gt;&gt; mile = 30   
&gt;&gt;&gt; type(mile)
&lt;type 'int'&gt;
&gt;&gt;&gt; 
</code></pre>

<h5>types: int, str, float .</h5>

<h3>2. Variables</h3>

<p>An assignment statement creates new variables and gives the values:</p>

<pre><code>&gt;&gt;&gt; name = "hoo"
&gt;&gt;&gt; name = 'hoo'
&gt;&gt;&gt; i = 15
&gt;&gt;&gt; j = 13.11
&gt;&gt;&gt; 
</code></pre>

<h3>3. Variable names and keywords</h3>

<ul>
<li>Variable names can be arbitrarily long.</li>
<li>They can contain both letters and numbers,but they have to begin with a letter.</li>
<li>It is a good idea to begin variable names with a lowercse letter than uppercase letter.</li>
<li>The underscore character,_,can appear in a name often used in namse with multiple words, such  as my_name or type_of_value.</li>
<li>Keywords cannot be used variable names.</li>
</ul>


<p>if you giva a variable an illegal name, you get a sytax error.</p>

<p>Python 2 has 31 keywords:</p>

<table>
<thead>
<tr>
<th> and  </th>
<th>  del </th>
<th> from  </th>
<th> not  </th>
<th> while</th>
</tr>
</thead>
<tbody>
<tr>
<td> as   </td>
<td> elif </td>
<td> global</td>
<td> or   </td>
<td> with</td>
</tr>
<tr>
<td>assert</td>
<td>esle  </td>
<td>   if  </td>
<td> pass </td>
<td> yield</td>
</tr>
<tr>
<td>break </td>
<td>except</td>
<td>import </td>
<td> print</td>
<td> class</td>
</tr>
<tr>
<td>exec  </td>
<td> in   </td>
<td> raise </td>
<td> continue</td>
<td>finally</td>
</tr>
<tr>
<td>is  </td>
<td> return </td>
<td> def </td>
<td> for </td>
<td> lambda </td>
</tr>
<tr>
<td> try</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody>
</table>


<p>In Python 3, <strong>exec</strong> is no longer a keyword, but  <strong>nonlocal</strong>  is.</p>

<h3>4. Operators and operands</h3>

<p>The operators +, _, *, /, and ** peform addition, subtraction, multiplication, division and exponentiation .</p>

<p>eg:  <em>20+31,   4-1, 5*2, 6/2, 5**2</em></p>

<pre><code>&gt;&gt;&gt; 5*2
10
&gt;&gt;&gt; 5**2
25
</code></pre>

<p>In Python 2</p>

<pre><code>&gt;&gt;&gt; 59/60
0
&gt;&gt;&gt; 
</code></pre>

<h6>The reason for the discrepancy is that Python is performing floor division.</h6>

<p>In Pytion 3</p>

<pre><code>&gt;&gt;&gt; 59/60
0.98333333333333328
&gt;&gt;&gt; 
</code></pre>

<h6>and the new operator <strong>//</strong> performs floor division.</h6>

<p>If either of the operands is a floating-point number, Python preforms floating-point divition, and the result is a float :</p>

<pre><code>&gt;&gt;&gt; 59/60
0.98333333333333328
&gt;&gt;&gt; 
</code></pre>

<h3>5. Expressions and statements</h3>

<ul>
<li>An expression is a combination of values, variables, and operators. eg: x + 17</li>
<li>A statement is a unit of code that the Python interpreter can execute.</li>
</ul>


<h3>6. Interactive mode and script mode</h3>

<ul>
<li>the scripte mode should use &#8216;print&#8217; to display the value.</li>
</ul>


<h3>7. String operations</h3>

<p> The + operator wokrs wiht strings, it performs concatenation, which means joining the strings by linking the end-to-end.</p>

<pre><code>&gt;&gt;&gt; first = 'bed'
&gt;&gt;&gt; second ='room'
&gt;&gt;&gt; first + second
'bedroom'
&gt;&gt;&gt; 
</code></pre>

<p>The * operator also wokrs on stirngs; it performs repetition .</p>

<pre><code>&gt;&gt;&gt; sound = 'da'
&gt;&gt;&gt; sound * 4
'dadadada'
&gt;&gt;&gt; 
</code></pre>

<h3>8. Comments</h3>

<p>The notes added to your programs called comments, and they start with hte # symobol. These to explain in natural language what the program is doing.</p>

<h2>Chapter 3</h2>

<h2><em>Functions</em></h2>

<h3>1. Function calls</h3>

<p>When you define a function, you specify the name and the sequence of statements. Later, you can &#8220;call&#8221; the function by name.</p>

<pre><code>&gt;&gt;&gt; type(32)
&lt;type 'int'&gt;
&gt;&gt;&gt; 
</code></pre>

<h3>2. Type conversion functions</h3>

<p>Python provides built-in fuctions that convert values from one type to another.</p>

<pre><code>&gt;&gt;&gt; int('32')
32
&gt;&gt;&gt; int('Hello')
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
ValueError: invalid literal for int() with base 10: 'Hello'
&gt;&gt;&gt; int('3.9999')
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
ValueError: invalid literal for int() with base 10: '3.9999'

&gt;&gt;&gt; int(3.9999)
3
&gt;&gt;&gt; int(2.3)
2

&gt;&gt;&gt; float(32)
32.0
&gt;&gt;&gt; float('3.999')
3.999

&gt;&gt;&gt; str(32)
'32'
&gt;&gt;&gt; str(3.999)
'3.999'
&gt;&gt;&gt; 
</code></pre>

<h3>3. Math functions</h3>

<p>Python has a math module that provides most of the mathematical functions. A module is a file tha contains a collection of related functions.
Before we can use the module, we have to import it:</p>

<pre><code>&gt;&gt;&gt; import math
</code></pre>

<p>This statement creates a module boject named math. If you print the module object, you get some information about it :</p>

<pre><code>&gt;&gt;&gt; print math
&lt;module 'math' from '/System/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/lib-dynload/math.so'&gt;
&gt;&gt;&gt; 

&gt;&gt;&gt; radians = 0.7
&gt;&gt;&gt; height = math.sin(radians)
&gt;&gt;&gt; print height
0.644217687238
&gt;&gt;&gt; 
</code></pre>

<h3>4. Composition</h3>

<p>So far, we have looke at the elements of a program&#8212;variables, expressions, and statements&#8212;in isolation, whitout talking about how tu combine them.<br/>
For example:</p>

<pre><code>&gt;&gt;&gt; degress = 120
&gt;&gt;&gt; x = math.sin(degress / 360.0 * 2 * math.pi)
&gt;&gt;&gt; print x
0.866025403784
&gt;&gt;&gt; x = math.exp(math.log(x+1))
&gt;&gt;&gt; print x
1.86602540378
&gt;&gt;&gt; minutes = hours * 60


&gt;&gt;&gt; hours = 11
&gt;&gt;&gt; minutes = hours * 60
&gt;&gt;&gt; hours * 60 = minutes
  File "&lt;stdin&gt;", line 1
SyntaxError: can't assign to operator
&gt;&gt;&gt; 
</code></pre>

<h3>5. Add new founctions</h3>

<p>A fouction definiton specifies the name of a new function and the sequence of statements that execute when the function is called.<br/>
Here is example:</p>

<pre><code>&gt;&gt;&gt; def print_lyrice():
...     print "I'm a lumberjack, and I'm okay."
...     print "I sleep all night and I work all day."
... 
</code></pre>

<p> def is a keyword that indicates that this is a function definiton. The name of functions is print_lyrice. <br/>
 The first line of the function is called the <strong>header</strong>. the rest is called the <strong>body</strong>. The header has to end with a colon and the body has to be indented.<br/>
 To end the function, you have to enter an empty line(this is not necessary in a script).</p>

<pre><code>&gt;&gt;&gt; print print_lyrice
&lt;function print_lyrice at 0x108f77cf8&gt;
&gt;&gt;&gt; type(print_lyrice)
&lt;type 'function'&gt;
&gt;&gt;&gt; 
</code></pre>

<h3>6. Definitions and uses</h3>

<pre><code>&gt;&gt;&gt; print_lyrice()
I'm a lumberjack, and I'm okay.
I sleep all night and I work all day.
&gt;&gt;&gt; 
</code></pre>

<h3>7. Flow of execution</h3>

<p>Execution always begins at the first statement of the program. Statements are executed on at a time, in order from top to bottom.<br/>
Function definitions do not alter the flow of execution of the programe, but remember that statements inside the function are not executed until the function is called.</p>

<h3>8. Parameters and arguments</h3>

<p>Inside the function, the arguments are assigned to variables called parameters.</p>

<pre><code>&gt;&gt;&gt; def print_twice(bruce):
...     print bruce
...     print bruce
... 
&gt;&gt;&gt; print_twice('Spam')
Spam
Spam
&gt;&gt;&gt; 
</code></pre>

<p>This function assigns the argument to a parameter named bruce, When the function is called, if print the value of the parameter(whatever it is)twice.</p>

<h3>9. Variables and parameters are local</h3>

<p>When you create a variable inside a function, it is <strong>local</strong>, which means that it only exists inside the function.</p>

<h3>10. Stack diagrams</h3>

<p>To keep track of which variables can be used where, it is sometimes useful to draw a <strong>stack diagram</strong>.</p>

<p>Each function is represented by a <strong>frame</strong>. A frame is a box whit the name of function bedide it and the parameters and variable of the fanction inside it.</p>

<p>The frames are arranged in a stack that indicates which function called whicn, and so on.</p>

<h3>11. Fruitful functions and void functions</h3>

<p>Some of the functions we are using, such as the math functions, yield resulets; for lack of a batter name, I call the <strong>fruitful functions</strong>. Other functions, like print_twice, preform an actions but don&#8217;t return a value. They are called <strong>void functions</strong>.</p>

<p>If you try to assign the result to variable, you get a special value called None.</p>

<pre><code>&gt;&gt;&gt; result = print_twice('Bing')
Bing
Bing
&gt;&gt;&gt; print result
None
</code></pre>

<p>The value None is not the same as the string &#8216;None&#8217;. It is a special value that has its own type.</p>

<pre><code>&gt;&gt;&gt; print type(None)
&lt;type 'NoneType'&gt;
</code></pre>

<h3>12. Why functions ?</h3>

<p>It may not be clear why it is worth the trouble to divide a program into functions. There are several reasons:/Users/povol</p>

<ul>
<li><p>Creating a new function gives you an opporunity to name a group of statements, which make your program easier to read and debug.</p></li>
<li><p>Functions can make a program smaller by eliminating repetitive code. Later, if you make a change, you have to make it in one place.</p></li>
<li>Dividing a long program into functions allows you to debug the parts one at a time ande then assemble them into a working whole.</li>
<li>Well-designed functions are often useful for mamy programs. Once you write and debug one, you can reuse it.</li>
</ul>


<h3>13. Importing with form</h3>

<p>Python provider two ways to import modules; we have already seen one:</p>

<pre><code>&gt;&gt;&gt; import math
&gt;&gt;&gt; print math
&lt;module 'math' from '/System/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/lib-dynload/math.so'&gt;
&gt;&gt;&gt; print math.pi
3.14159265359
&gt;&gt;&gt; 
</code></pre>

<p>If you import math, you get a module object name math. The module object contains constants like pi and functions like sin and exp.</p>

<p>But if you try access pi directly, you get an error.</p>

<pre><code>&gt;&gt;&gt; print pi
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
NameError: name 'pi' is not defined
&gt;&gt;&gt; 
</code></pre>

<p>As an alternative, you can import an object from a module like this:</p>

<pre><code>&gt;&gt;&gt; from math import pi
</code></pre>

<p>Now you can access pi directly, whitout dot notaion.</p>

<pre><code>&gt;&gt;&gt; print pi
3.14159265359   
&gt;&gt;&gt; 
</code></pre>

<p>Or you can use the star operator to import everything from the module:</p>

<pre><code>&gt;&gt;&gt; from math import *
&gt;&gt;&gt; cos(pi)
-1.0
&gt;&gt;&gt;     
</code></pre>

<h2>Chapter 4</h2>

<h2><em>Case study: interface design</em></h2>

<h3>1.</h3>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[在Android上搭建Python环境]]></title>
    <link href="http://janrone.github.com/blog/2013/04/09/zai-androidshang-da-jian-pythonhuan-jing/"/>
    <updated>2013-04-09T14:00:00+08:00</updated>
    <id>http://janrone.github.com/blog/2013/04/09/zai-androidshang-da-jian-pythonhuan-jing</id>
    <content type="html"><![CDATA[<h3>1.下载和安装 Scripting Layer for Android (SL4A)</h3>

<p>Scripting Layer for Android (SL4A) 是一个开源项目，目标是为android系统提供脚本语言的支持，使用户可以直接在android平台上进行脚本语言的编辑、解释和执行。这些脚本语言已 经可是使用很多封装好的android API来开发功能丰富的android应用程序，并且使开发变得更加的简单和高效!
这个平台支持多种脚本语言，比如 Python, Perl, JRuby, Lua, BeanShell, JavaScript, Tcl, shell 等，你可以选择你熟悉的语言进行开发，本系列教程使用Python为编程脚本语言。
SL4A项目的地址: <a href="http://code.google.com/p/android-scripting/">http://code.google.com/p/android-scripting/</a></p>

<h3>2.下载和安装 Python for android</h3>

<p>在项目主页面的右上方，有该应用支持的所有脚本语言的下载列表，如下图所示;</p>

<p> <img src="http://janrone.github.com/images/post/2013-04-09-01.png" alt="" /></p>

<p> <!--more--></p>

<p>选择你使用的语言，打开相应的语言环境的下载页面，与下载SL4A的方式类似，将该语言包应用下载并安装到你的手机上。</p>

<p>或者直接去Python for android项目地址 <a href="https://code.google.com/p/python-for-android/">https://code.google.com/p/python-for-android/</a> 下载</p>

<p>程序安装完成后，打开Python for Android应用，在应用的最上方会有一个Install的按钮，点击该按钮，就会自动下载Python相关的文件并解压和安装，这个过程结束后，你的android手机上的Python开发环境就配置好了！</p>

<p>多两个应用 ，如图</p>

<p> <img src="http://janrone.github.com/images/post/20130409115645.png" alt="" /></p>

<h3>3.脚本模式 第一个HelloWorld程序</h3>

<p>打开SL4A应用，会进入Python示例代码列表，基本上是对主要API的演示，部分示例可能由于偏老，运行时会提示方法过期或者运行异常的问题，这个至少修改少许代码即可，有机会的话，我会在后续课程中介绍这是示例以及修正的方法。
点Menu键，然后点击Add，选择Python2.6.2，就会新建一个Python脚本文件，将文件的名字命名为：HelloPythonInAndroid.py
点击屏幕进入脚本编辑区，开始输入如下内容：</p>

<p>import android
droid = android.Android()
droid.makeToast(‘Hello, Python in Android’）</p>

<p>输入完成后，如下图所示:</p>

<p>点击Menu，选择Save&amp;Run，恭喜你，你已经用Python完成了第一个Android应用：HelloPythonInAndroid!</p>

<h3>4.交互模式 Python命令行，第一个HelloWorld程序</h3>

<p>1.打开SL4A，点击menu按钮，点击view 选择interpreters,如图</p>

<p> <img src="http://janrone.github.com/images/post/20130409121629.png" alt="" /></p>

<p> <img src="http://janrone.github.com/images/post/20130409120507.jpg" alt="" /></p>

<p>2.点击interpreters按钮，选择Pythonx.x.x 即可进入python命令行,如图</p>

<p>  <img src="http://janrone.github.com/images/post/20130409120537.png" alt="" /></p>

<p>3.在命令行里运行所要编写的代码，这里我们以hello，python world为例！如图</p>

<p> <img src="http://janrone.github.com/images/post/20130409120724.png" alt="" /></p>

<h2>完</h2>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mac OS x下载和编译Android 4.2.2 源码]]></title>
    <link href="http://janrone.github.com/blog/2013/04/08/mac-os-xxia-zai-he-bian-yi-android-4-dot-2-2-yuan-ma/"/>
    <updated>2013-04-08T15:56:00+08:00</updated>
    <id>http://janrone.github.com/blog/2013/04/08/mac-os-xxia-zai-he-bian-yi-android-4-dot-2-2-yuan-ma</id>
    <content type="html"><![CDATA[<h3>创建一个映像用来下载android源码</h3>

<p>1, $ hdiutil create -type SPARSE -fs &#8216;Case-sensitive Journaled HFS+&#8217; -size 40g ~/android.sparseimage</p>

<p>2, $ hdiutil attach ~/android.sparseimage -mountpoint /Volumes/android</p>

<p>3,  $ mkdir ~/bin</p>

<p>4,  $ PATH=~/bin:$PATH</p>

<p>5,  $ curl https://dl-ssl.google.com/dl/googlesource/git-repo/repo > ~/bin/repo</p>

<p>6,  $ chmod a+x ~/bin/repo</p>

<p>7,  $ cd /Volumes/android/</p>

<p>8,  $ mkdir WORKING_DIRECTORY</p>

<p>9,  $ CD WORKING_DIRECTORY/</p>

<p>10, $ repo init -u https://android.googlesource.com/platform/manifest -b android-4.2.2_r1</p>

<p>11, $repo sync</p>

<!-- more -->


<h3>设置必要的编译环境初始化编译环境：</h3>

<p>1, $source build/envsetup.sh</p>

<p>2, 选择编译目标 $lunch full-eng</p>

<h3>开始编译代码</h3>

<p>$make -j8</p>

<p>开始时间 2013－03-28 19:17 <br/>
编译到了 40分钟左右的时候出现了错误 No space left on device，看错误3解决方法。<br/>
之后接着编译 make 这次没有是用 －j,因为心疼电脑，嘿嘿 ，大概半小时编译完成。</p>

<p>nstalled file list: out/target/product/generic/installed-files.txt<br/>
Target system fs image: out/target/product/generic/obj/PACKAGING/systemimage_intermediates/system.img<br/>
Running:  mkyaffs2image -f out/target/product/generic/system out/target/product/generic/obj/PACKAGING/systemimage_intermediates/system.img<br/>
Install system fs image: out/target/product/generic/system.img</p>

<p>编译完成后运行：emulator -kernel ./prebuilts/qemu-kernel/arm/kernel-qemu -sysdir ./out/target/product/generic -system system.img -data userdata.img -ramdisk ramdisk.img</p>

<p>出现错误 qemu: could not load initrd &#8216;ramdisk.img&#8217;，看错误4解决方法</p>

<p>直接运行：
emulator -kernel ./prebuilts/qemu-kernel/arm/kernel-qemu-armv7 -sysdir ./out/target/product/generic/ -system system.img -data userdata.img</p>

<h2>最终结果图 ：</h2>

<p><img src="http://janrone.github.com/images/post/2013-04-08-01.png" alt="" /></p>

<hr />

<h3>错误 1</h3>

<p>在android4.0源码中，mm编译apk时出现下面的错误：</p>

<pre><code>make: *** No rule to make target `out/target/common/obj/JAVA_LIBRARIES/android_stubs_current_intermediates/javalib.jar', needed by `out/target/common/obj/APPS/NativeTimer_intermediates/classes-full-debug.jar'.  Stop.
</code></pre>

<p>解决方法：
在源码根目录执行：
make clobber
make -j8</p>

<p>这个错误的好像是由于在make一个任务时，并没有结束，这时在进行make就会报
make clobber的功能是把上一次make命令生成的文件或目录清除掉，效果比make clean更严格。
这样编译完成后，在编译apk就可以了。</p>

<hr />

<h3>错误2</h3>

<p>povolmatoMacBook-Pro:untitled povol$ source build/envsetup.sh<br/>
including device/asus/grouper/vendorsetup.sh<br/>
including device/asus/tilapia/vendorsetup.sh<br/>
including device/generic/armv7-a-neon/vendorsetup.sh<br/>
including device/generic/armv7-a/vendorsetup.sh<br/>
including device/generic/mips/vendorsetup.sh<br/>
including device/generic/x86/vendorsetup.sh<br/>
including device/lge/mako/vendorsetup.sh<br/>
including device/samsung/maguro/vendorsetup.sh<br/>
including device/samsung/manta/vendorsetup.sh<br/>
including device/samsung/toro/vendorsetup.sh<br/>
including device/samsung/toroplus/vendorsetup.sh<br/>
including device/ti/panda/vendorsetup.sh<br/>
including sdk/bash_completion/adb.bash</p>

<pre><code>povolmatoMacBook-Pro:untitled povol$ lunch full-eng
build/core/combo/HOST_darwin-x86.mk:62: *****************************************************
build/core/combo/HOST_darwin-x86.mk:63: * Cannot find SDK 10.6 at /Applications/Xcode.app/
Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.6.sdk
build/core/combo/HOST_darwin-x86.mk:65: * If you wish to build using higher version of SDK, 
build/core/combo/HOST_darwin-x86.mk:66: * try setting BUILD_MAC_SDK_EXPERIMENTAL=1 before 
build/core/combo/HOST_darwin-x86.mk:67: * rerunning this command 
build/core/combo/HOST_darwin-x86.mk:69: *****************************************************
build/core/combo/HOST_darwin-x86.mk:70: *** Stop..  Stop.

** Don't have a product spec for: 'full'
** Do you have the right repo manifest?


//**//找不到mac os x sdk 10.6 执行 
povolmatoMacBook-Pro:untitled povol$ export BUILD_MAC_SDK_EXPERIMENTAL=1

povolmatoMacBook-Pro:untitled povol$ lunch full-eng

一些初始化信息

============================================
PLATFORM_VERSION_CODENAME=REL
PLATFORM_VERSION=4.2.2
TARGET_PRODUCT=full
TARGET_BUILD_VARIANT=eng
TARGET_BUILD_TYPE=release
TARGET_BUILD_APPS=
TARGET_ARCH=arm
TARGET_ARCH_VARIANT=armv7-a
HOST_ARCH=x86
HOST_OS=darwin
HOST_OS_EXTRA=Darwin-12.3.0-x86_64-i386-64bit
HOST_BUILD_TYPE=release
BUILD_ID=JDQ39
OUT_DIR=out
</code></pre>

<p>============================================</p>

<p>povolmatoMacBook-Pro:untitled povol$</p>

<p>========================================================</p>

<h3>错误3</h3>

<pre><code>/Volumes/untitled/prebuilts/gcc/darwin-x86/arm/arm-linux-androideabi-4.6/bin/../lib/gcc/arm-linux-androideabi/4.6.x-google/../../../../arm-linux-androideabi/bin/ld: fatal error: out/target/product/generic/obj/SHARED_LIBRARIES/libmock_ril_intermediates/LINKED/libmock_ril.so: No space left on device
collect2: ld returned 1 exit status
make: *** [out/target/product/generic/obj/SHARED_LIBRARIES/libmock_ril_intermediates/LINKED/libmock_ril.so] Error 1
make: *** Waiting for unfinished jobs....
/Volumes/untitled/prebuilts/gcc/darwin-x86/arm/arm-linux-androideabi-4.6/bin/../lib/gcc/arm-linux-androideabi/4.6.x-google/../../../../arm-linux-androideabi/bin/ld: warning: hidden symbol 'mkstemp' in out/target/product/generic/obj/SHARED_LIBRARIES/libchromium_net_intermediates/base/file_util_android.o is referenced by DSO out/target/product/generic/obj/lib/libcutils.so
/Volumes/untitled/prebuilts/gcc/darwin-x86/arm/arm-linux-androideabi-4.6/bin/../lib/gcc/arm-linux-androideabi/4.6.x-google/../../../../arm-linux-androideabi/bin/ld: fatal error: out/target/product/generic/obj/SHARED_LIBRARIES/libchromium_net_intermediates/LINKED/libchromium_net.so: No space left on device
collect2: ld returned 1 exit status
make: *** [out/target/product/generic/obj/SHARED_LIBRARIES/libchromium_net_intermediates/LINKED/libchromium_net.so] Error 1
/Volumes/untitled/prebuilts/gcc/darwin-x86/arm/arm-linux-androideabi-4.6/bin/../lib/gcc/arm-linux-androideabi/4.6.x-google/../../../../arm-linux-androideabi/bin/ld: fatal error: out/target/product/generic/obj/SHARED_LIBRARIES/libbcc_intermediates/LINKED/libbcc.so: No space left on device
collect2: ld returned 1 exit status
make: *** [out/target/product/generic/obj/SHARED_LIBRARIES/libbcc_intermediates/LINKED/libbcc.so] Error 1
</code></pre>

<p>解决：</p>

<p>执行 df －li 查看 iused  我的在untitled 显示100%</p>

<pre><code>povolmatoMacBook-Pro:untitled povol$ df -li 
Filesystem   512-blocks      Used Available Capacity  iused    ifree %iused  Mounted on
/dev/disk0s2  777343744 450761888 326069856    59% 56409234 40758732   58%   /
/dev/disk0s4  197748728  82422896 115325832    42%   183830 57683118    0%   /Volumes/BOOTCAMP
/dev/disk1      8388608   1611096   6777512    20%   201385   847189   19%   /Volumes/RamDisk

/dev/disk3s2   83214256  83193528     20728   100% 10399189     2591  100%   /Volumes/untitled
</code></pre>

<p>所以提示 No space left on device</p>

<p>重新启动了mac之后</p>

<pre><code>povolmatoMacBook-Pro:android povol$ df -li 
Filesystem   512-blocks      Used Available Capacity  iused    ifree %iused  Mounted on
/dev/disk0s2  777343744 482859288 293972456    63% 60421409 36746557   62%   /

/dev/disk0s4  197748728  82422896 115325832    42%   183830 57683118    0%   /Volumes/BOOTCAMP

/dev/disk1      8388608     73632   8314976     1%     9202  1039372    1%   /Volumes/RamDisk

/dev/disk3s2   83214256  50383960  32830296    61%  6297993  4103787   61%   /Volumes/untitled
</code></pre>

<p>这次显示／Volumes/untitled iused 为61% 接着运行 make
编译成功 。</p>

<p> <br/></p>

<hr />

<h3>错误 4</h3>

<p>qemu: could not load initrd &#8216;ramdisk.img&#8217;，</p>

<p>直接参数-ramdisk ramdisk.img去掉，结果模拟器跑起来了，是运行出窗口后，就是黑屏。</p>

<p>换下kernel，用./prebuilts/qemu-kernel/arm/kernel-qemu-armv7，之后运行成功 。</p>

<br/><br/><br/>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[怎么搭建 Octopress 在 github ! ]]></title>
    <link href="http://janrone.github.com/blog/2013/01/12/zen-yao-da-jian-octopress-zai-github/"/>
    <updated>2013-01-12T20:34:00+08:00</updated>
    <id>http://janrone.github.com/blog/2013/01/12/zen-yao-da-jian-octopress-zai-github</id>
    <content type="html"><![CDATA[<h3>git 和 github 配置</h3>

<h6>1.先注册一个github账号， 创建github pages 。</h6>

<p>创建一个新的Repository。这里须要重视的是，若是想要博客的首页是http://yourname.github.com，则Repository的project name就必须是yourname.github.com。</p>

<p>安装Git并进行设置，mac下git默认已经装好 。</p>

<h6>2.接下来设置 SH Keys  .</h6>

<p>履行ssh-keygen -t rsa -C &#8220;your_email＠youremail.com&#8221;，回车。</p>

<p>然后输入两遍暗码。</p>

<!-- more -->


<p>到c:\Users\用户名.ssh\目次找到id_rsa.pub，并用文本软件打开复制全部。目录是隐藏的。</p>

<h5>3.将SSH Key添加到GitHub</h5>

<p>到github网站选择“Account Settings”>>“SSH Public Keys”>>“Add another public key”，将刚才复制的内容粘贴到key文本框内。</p>

<h5>4. 测试</h5>

<p>为确保设置成功，现在可以测试设置成果啦。记住，&#8221;git@github.com&#8221;是默认的，无需修改。</p>

<pre><code>    $ ssh -T git@github.com  （也可以用 SSH -v git@github.com ）
</code></pre>

<h5>5.设置个人信息</h5>

<p>现在，你已经成功安装Git，并设置好SSH Keys，是设置个人信息的时候啦：</p>

<p>设置用户名和电子邮件</p>

<pre><code>    $ git config --global user.name "Firstname Lastname"
    $ git config --global user.email "youremail@youremail.com"
</code></pre>

<h3>安装ruby 1.9.3 版本 ，因为目前2.0 Octopress 需要的真是 1.9.3 ,否则到后边rake install 不会有问题的。</h3>

<p>mac 本身的版本比这个低。 <a href="http://www.moncefbelyamani.com/how-to-install-xcode-homebrew-git-rvm-ruby-on-mac/">id</a>:http://www.moncefbelyamani.com/how-to-install-xcode-homebrew-git-rvm-ruby-on-mac/ &#8220;安装可以参看这篇文章。&#8221;</p>

<h3>Octopress安装和配置</h3>

<h5>1.安装Octopress</h5>

<p>建立一个放置Octopress的目录，这里是oblog文件夹，clone octopress程序到本地,替换username为你的自定义名称</p>

<pre><code>    cd ~/oblog/
    git clone git://github.com/imathis/octopress.git username.github.com
    cd ~/oblog/username.github.com
    gem install bundler
    bundle install
</code></pre>

<p>接下来</p>

<pre><code>    rake setup_github_pages    //配置github项目地址 接下来会提示输入url
    Enter the read/write url for your repository  
    (For example, 'git@github.com:your_username/your_username.github.com)

    rake install    //是安装Octopress默认主题的
    rake new_post["Hello World"]   //建立新文章，文章存放在source/_post里面，格式为md的，现在就找个爽快点的[编辑器](#editor)来写文章了

    rake generate  //生成静态文件
    rake preview  //开启站点预览，动态生成， http://127.0.0.1:4000
    rake deploy  //生成静态并部署到github
    选择性的备份source文件夹到github，这样就有了文章md源文件的版本管理
</code></pre>

<p>提交的代码到git库
git add .
git commit -m &#8220;your message log 例：保存source文件夹，文章源文件&#8221;
git push origin source   //建立sourch分支并保存</p>

<p>以后写文章就只需要用
rake generate
rake deploy</p>

<h5>2.Ocotpress博客配置</h5>

<p>更改下面的配置后，还需要运行 rake generate、rake deploy等等命令的。</p>

<p>1、默认的博客运行成功的话，就需要按照自己的要求对博客配置进行修改了，主要是修改Octopress根目录下的主配置文件_config.yml。</p>

<pre><code>    url:  http://username.github.com                      博客地址
    title:  username's blog                               博客标题
    subtitle: A blogging framework for hackers.           副标题
    author:  xhhjin                                       作者
    simple_search:  http://www.google.com.hk/search       搜索引擎
    description:                                          关于博客的描述
    subscribe_rss:  /atom.xml                             Rss订阅地址, 默认是  /atom.xml
    subscribe_email:                                      提供Email订阅的地址
    email:                                                Rss订阅的Email地址
    root:/                                                博客路径，默认是"/"，如果你打算在子目录中，记得修改这个路径
    permalink: /blog/:year/:month/:day/:title/            文章的固定链接形式
</code></pre>

<p>2.Jekyll &amp; Plugins</p>

<pre><code>    paginate: 10                    # 每页的文章数量，超过翻页
    recent_posts: 5                 # 右侧“最近发表”的模块里显示的文章数量
    excerpt_link: "Read on &amp;rarr;"  # 在文章中使用&lt;!-- more --&gt;,列表页将不再显示全文，而是显示“Read on”的链接，指向全文
    default_asides: [asides/recent_posts.html, asides/github.html, asides/twitter.html]    # 用于配置侧边栏
</code></pre>

<h4>呵呵，我的第一篇博文算是写完了，希望和大家多交流，互相学习。</h4>

<h3>我安装过程中碰到的问题。</h3>

<p>操作如果没有响应 ，有的是需要翻墙的 . 而且需要sudo权限 .
使用bundle 之前需要安装 gem install liquid
如果出错看提示，根据提示跟新 我在装  liquid 的时候就需要更新这个 gem update &#8211;system
之后在安装 liquid .
之后就可以使用 bundle 了 .
留意bundle update 提示使用的 rake  和 安装 rake 版本是否一致。不然会出错。（卸载不一样的版本 gem uninstall rake -v=10.0.3）</p>

<p>或者 在终端提示You have already activated rake 10.0.2, but your Gemfile requires rake 0.9.2.2. Using bundle exec may solve this.，解决办法，找到Gemfile文件，修改gem rake对应那行为10.0.2即可。  我用的以上的方法。</p>

<p>Fetching gem metadata from http://rubygems.org/&#8230;&#8230;..
Fetching gem metadata from http://rubygems.org/..
Installing rake (0.9.6)</p>

<p>使用rake 命令遇到问题：
C:\ruby186\workspace>rake db:migrate
rake aborted!
No Rakefile found (looking for: rakefile, Rakefile, rakefile.rb, Rakefile.rb)
c:/ruby186/lib/ruby/gems/1.8/gems/rake-0.8.7/lib/rake.rb:2377:in `raw_load_rakef
ile&#8217;
(See full trace by running task with &#8211;trace)
原因：没有进入工程目录。</p>

<p>github page博客搭建参考在github上用octopress搭建博客，关于ruby的安装可参考Ruby在windows下的安装 。下面是自己安装过程中碰到的几个错误，分享下：<br/>
(1) ruby安装目录不能包含空格，否则在某些gem install会报错<br/>
(2) rake setup_github_pages 提示：window No such file or directory – git remote -v
这是因为windows 的cmd没有配置git路径，只要在环境变量path中加入git的bin目录即可<br/>
(3) invalid byte sequence in GBK rake setup_github_pages
这是因为本机windows的cmd默认为gbk，运行命令set LC_ALL=en_US.UTF-8 set LANG=en_US.UTF-8先<br/>
(4) rake deploy 提示## Deploying website via Rsync FAILED rake deploy
没有先rake setup_github_pages</p>
]]></content>
  </entry>
  
</feed>
