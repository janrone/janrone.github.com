<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Node on Janrone‘s Site</title>
    <link>https://janrone.allone.top/categories/node/</link>
    <description>Recent content in Node on Janrone‘s Site</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Thu, 26 May 2016 18:38:13 +0800</lastBuildDate><atom:link href="https://janrone.allone.top/categories/node/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Node与Express开发笔记一</title>
      <link>https://janrone.allone.top/posts/2016-05-26-node%E4%B8%8Eexpress%E5%BC%80%E5%8F%91%E7%AC%94%E8%AE%B0%E4%B8%80/</link>
      <pubDate>Thu, 26 May 2016 18:38:13 +0800</pubDate>
      
      <guid>https://janrone.allone.top/posts/2016-05-26-node%E4%B8%8Eexpress%E5%BC%80%E5%8F%91%E7%AC%94%E8%AE%B0%E4%B8%80/</guid>
      <description>前言    JavaScript、 Node 和 Express 的组合是 Web 团队的理想选择， 这个强大的、 可快速部署的技术栈得到了开发社区和大公司的广泛认可。
Node 和 Express 就像发射 JavaScript 希望之银弹的机关枪。
初识Express    老实说， JavaScript 确实降低了业余选手进入的门槛， 也有很多充斥着各种问题的 JavaScript 代码， 这损坏了 JavaScript 的名声。 用句通俗的话说， 即“ 不是游戏太差， 而是玩家太烂”。
Express 网站上是这样介绍 Express 的：“ 精简的、 灵活的 Node.js Web 程序框架， 为构建单页、 多页及混合的 Web 程序提供了一系列健壮的功能特性。”
单页Web程序    单页 Web 程序是比较新颖的想法。 不像之前的网站， 用户每次访问不同的页面都要发起网络请求， 单页 Web 程序把整个网站（ 或很大一部分） 都下载到客户端浏览器上。经过初始下载后， 用户访问不同页面的速度更快了， 因为几乎不需要或者只要很少的服务端通信。
单页程序的开发可以使用 Angular 或 Ember 等流行框架， Express 跟它们都配合得很好。</description>
    </item>
    
  </channel>
</rss>
