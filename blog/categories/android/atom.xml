<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Android | Janrone's Blog]]></title>
  <link href="http://janrone.github.com/blog/categories/android/atom.xml" rel="self"/>
  <link href="http://janrone.github.com/"/>
  <updated>2013-05-14T16:59:41+08:00</updated>
  <id>http://janrone.github.com/</id>
  <author>
    <name><![CDATA[Janrone]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[在android上搭建python环境]]></title>
    <link href="http://janrone.github.com/blog/2013/04/09/zai-androidshang-da-jian-pythonhuan-jing/"/>
    <updated>2013-04-09T14:00:00+08:00</updated>
    <id>http://janrone.github.com/blog/2013/04/09/zai-androidshang-da-jian-pythonhuan-jing</id>
    <content type="html"><![CDATA[<h3>1.下载和安装 Scripting Layer for Android (SL4A)</h3>

<p>Scripting Layer for Android (SL4A) 是一个开源项目，目标是为android系统提供脚本语言的支持，使用户可以直接在android平台上进行脚本语言的编辑、解释和执行。这些脚本语言已 经可是使用很多封装好的android API来开发功能丰富的android应用程序，并且使开发变得更加的简单和高效!
这个平台支持多种脚本语言，比如 Python, Perl, JRuby, Lua, BeanShell, JavaScript, Tcl, shell 等，你可以选择你熟悉的语言进行开发，本系列教程使用Python为编程脚本语言
SL4A项目的地址: <a href="http://code.google.com/p/android-scripting/">http://code.google.com/p/android-scripting/</a></p>

<h3>2.下载和安装 Python for android</h3>

<p>在项目主页面的右上方，有该应用支持的所有脚本语言的下载列表，如下图所示;</p>

<p> <img src="/images/post/2013-04-09-01.png" alt="" /></p>

<p> <!--more--></p>

<p>选择你使用的语言，打开相应的语言环境的下载页面，与下载SL4A的方式类似，将该语言包应用下载并安装到你的手机上。</p>

<p>或者直接去Python for android项目地址 <a href="https://code.google.com/p/python-for-android/">https://code.google.com/p/python-for-android/</a> 下载</p>

<p>程序安装完成后，打开Python for Android应用，在应用的最上方会有一个Install的按钮，点击该按钮，就会自动下载Python相关的文件并解压和安装，这个过程结束后，你的android手机上的Python开发环境就配置好了！</p>

<p>多两个应用 ，如图</p>

<p> <img src="/images/post/20130409115645.png" alt="" /></p>

<h3>3.脚本模式 第一个HelloWorld程序</h3>

<p>打开SL4A应用，会进入Python示例代码列表，基本上是对主要API的演示，部分示例可能由于偏老，运行时会提示方法过期或者运行异常的问题，这个至少修改少许代码即可，有机会的话，我会在后续课程中介绍这是示例以及修正的方法。
点Menu键，然后点击Add，选择Python2.6.2，就会新建一个Python脚本文件，将文件的名字命名为：HelloPythonInAndroid.py
点击屏幕进入脚本编辑区，开始输入如下内容：</p>

<p>import android
droid = android.Android()
droid.makeToast(‘Hello, Python in Android’）</p>

<p>输入完成后，如下图所示:</p>

<p>点击Menu，选择Save&amp;Run，恭喜你，你已经用Python完成了第一个Android应用：HelloPythonInAndroid!</p>

<h3>4.交互模式 Python命令行，第一个HelloWorld程序</h3>

<p>1.打开SL4A，点击menu按钮，点击view 选择interpreters,如图</p>

<p> <img src="/images/post/20130409121629.png" alt="" /></p>

<p> <img src="/images/post/20130409120507.jpg" alt="" /></p>

<p>2.点击interpreters按钮，选择Pythonx.x.x 即可进入python命令行,如图</p>

<p>  <img src="/images/post/20130409120537.png" alt="" /></p>

<p>3.在命令行里运行所要编写的代码，这里我们以hello，python world为例！如图</p>

<p> <img src="/images/post/20130409120724.png" alt="" /></p>

<h2>完</h2>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[mac os x下载和编译android 4.2.2 源码]]></title>
    <link href="http://janrone.github.com/blog/2013/04/08/mac-os-xxia-zai-he-bian-yi-android-4-dot-2-2-yuan-ma/"/>
    <updated>2013-04-08T15:56:00+08:00</updated>
    <id>http://janrone.github.com/blog/2013/04/08/mac-os-xxia-zai-he-bian-yi-android-4-dot-2-2-yuan-ma</id>
    <content type="html"><![CDATA[<h3>创建一个映像用来下载android源码</h3>

<p>1, $ hdiutil create -type SPARSE -fs 'Case-sensitive Journaled HFS+' -size 40g ~/android.sparseimage</p>

<p>2, $ hdiutil attach ~/android.sparseimage -mountpoint /Volumes/android</p>

<p>3,  $ mkdir ~/bin</p>

<p>4,  $ PATH=~/bin:$PATH</p>

<p>5,  $ curl https://dl-ssl.google.com/dl/googlesource/git-repo/repo > ~/bin/repo</p>

<p>6,  $ chmod a+x ~/bin/repo</p>

<p>7,  $ cd /Volumes/android/</p>

<p>8,  $ mkdir WORKING_DIRECTORY</p>

<p>9,  $ CD WORKING_DIRECTORY/</p>

<p>10, $ repo init -u https://android.googlesource.com/platform/manifest -b android-4.2.2_r1</p>

<p>11, $repo sync</p>

<!-- more -->


<h3>设置必要的编译环境初始化编译环境：</h3>

<p>1, $source build/envsetup.sh</p>

<p>2, 选择编译目标 $lunch full-eng</p>

<h3>开始编译代码</h3>

<p>$make -j8</p>

<p>开始时间 2013－03-28 19:17 <br/>
编译到了 40分钟左右的时候出现了错误 No space left on device，看错误3解决方法。<br/>
之后接着编译 make 这次没有是用 －j,因为心疼电脑，嘿嘿 ，大概半小时编译完成。</p>

<p>nstalled file list: out/target/product/generic/installed-files.txt<br/>
Target system fs image: out/target/product/generic/obj/PACKAGING/systemimage_intermediates/system.img<br/>
Running:  mkyaffs2image -f out/target/product/generic/system out/target/product/generic/obj/PACKAGING/systemimage_intermediates/system.img<br/>
Install system fs image: out/target/product/generic/system.img</p>

<p>编译完成后运行：emulator -kernel ./prebuilts/qemu-kernel/arm/kernel-qemu -sysdir ./out/target/product/generic -system system.img -data userdata.img -ramdisk ramdisk.img</p>

<p>出现错误 qemu: could not load initrd 'ramdisk.img'，看错误4解决方法</p>

<p>直接运行：
emulator -kernel ./prebuilts/qemu-kernel/arm/kernel-qemu-armv7 -sysdir ./out/target/product/generic/ -system system.img -data userdata.img</p>

<h2>最终结果图 ：</h2>

<p><img src="/images/post/2013-04-08-01.png" alt="" /></p>

<hr />

<h3>错误 1</h3>

<p>在android4.0源码中，mm编译apk时出现下面的错误：</p>

<pre><code>make: *** No rule to make target `out/target/common/obj/JAVA_LIBRARIES/android_stubs_current_intermediates/javalib.jar', needed by `out/target/common/obj/APPS/NativeTimer_intermediates/classes-full-debug.jar'.  Stop.
</code></pre>

<p>解决方法：
在源码根目录执行：
make clobber
make -j8</p>

<p>这个错误的好像是由于在make一个任务时，并没有结束，这时在进行make就会报
make clobber的功能是把上一次make命令生成的文件或目录清除掉，效果比make clean更严格。
这样编译完成后，在编译apk就可以了。</p>

<hr />

<h3>错误2</h3>

<p>povolmatoMacBook-Pro:untitled povol$ source build/envsetup.sh<br/>
including device/asus/grouper/vendorsetup.sh<br/>
including device/asus/tilapia/vendorsetup.sh<br/>
including device/generic/armv7-a-neon/vendorsetup.sh<br/>
including device/generic/armv7-a/vendorsetup.sh<br/>
including device/generic/mips/vendorsetup.sh<br/>
including device/generic/x86/vendorsetup.sh<br/>
including device/lge/mako/vendorsetup.sh<br/>
including device/samsung/maguro/vendorsetup.sh<br/>
including device/samsung/manta/vendorsetup.sh<br/>
including device/samsung/toro/vendorsetup.sh<br/>
including device/samsung/toroplus/vendorsetup.sh<br/>
including device/ti/panda/vendorsetup.sh<br/>
including sdk/bash_completion/adb.bash</p>

<pre><code>povolmatoMacBook-Pro:untitled povol$ lunch full-eng
build/core/combo/HOST_darwin-x86.mk:62: *****************************************************
build/core/combo/HOST_darwin-x86.mk:63: * Cannot find SDK 10.6 at /Applications/Xcode.app/
Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.6.sdk
build/core/combo/HOST_darwin-x86.mk:65: * If you wish to build using higher version of SDK, 
build/core/combo/HOST_darwin-x86.mk:66: * try setting BUILD_MAC_SDK_EXPERIMENTAL=1 before 
build/core/combo/HOST_darwin-x86.mk:67: * rerunning this command 
build/core/combo/HOST_darwin-x86.mk:69: *****************************************************
build/core/combo/HOST_darwin-x86.mk:70: *** Stop..  Stop.

** Don't have a product spec for: 'full'
** Do you have the right repo manifest?


//**//找不到mac os x sdk 10.6 执行 
povolmatoMacBook-Pro:untitled povol$ export BUILD_MAC_SDK_EXPERIMENTAL=1

povolmatoMacBook-Pro:untitled povol$ lunch full-eng

一些初始化信息

============================================
PLATFORM_VERSION_CODENAME=REL
PLATFORM_VERSION=4.2.2
TARGET_PRODUCT=full
TARGET_BUILD_VARIANT=eng
TARGET_BUILD_TYPE=release
TARGET_BUILD_APPS=
TARGET_ARCH=arm
TARGET_ARCH_VARIANT=armv7-a
HOST_ARCH=x86
HOST_OS=darwin
HOST_OS_EXTRA=Darwin-12.3.0-x86_64-i386-64bit
HOST_BUILD_TYPE=release
BUILD_ID=JDQ39
OUT_DIR=out
</code></pre>

<p>============================================</p>

<p>povolmatoMacBook-Pro:untitled povol$</p>

<p>========================================================</p>

<h3>错误3</h3>

<pre><code>/Volumes/untitled/prebuilts/gcc/darwin-x86/arm/arm-linux-androideabi-4.6/bin/../lib/gcc/arm-linux-androideabi/4.6.x-google/../../../../arm-linux-androideabi/bin/ld: fatal error: out/target/product/generic/obj/SHARED_LIBRARIES/libmock_ril_intermediates/LINKED/libmock_ril.so: No space left on device
collect2: ld returned 1 exit status
make: *** [out/target/product/generic/obj/SHARED_LIBRARIES/libmock_ril_intermediates/LINKED/libmock_ril.so] Error 1
make: *** Waiting for unfinished jobs....
/Volumes/untitled/prebuilts/gcc/darwin-x86/arm/arm-linux-androideabi-4.6/bin/../lib/gcc/arm-linux-androideabi/4.6.x-google/../../../../arm-linux-androideabi/bin/ld: warning: hidden symbol 'mkstemp' in out/target/product/generic/obj/SHARED_LIBRARIES/libchromium_net_intermediates/base/file_util_android.o is referenced by DSO out/target/product/generic/obj/lib/libcutils.so
/Volumes/untitled/prebuilts/gcc/darwin-x86/arm/arm-linux-androideabi-4.6/bin/../lib/gcc/arm-linux-androideabi/4.6.x-google/../../../../arm-linux-androideabi/bin/ld: fatal error: out/target/product/generic/obj/SHARED_LIBRARIES/libchromium_net_intermediates/LINKED/libchromium_net.so: No space left on device
collect2: ld returned 1 exit status
make: *** [out/target/product/generic/obj/SHARED_LIBRARIES/libchromium_net_intermediates/LINKED/libchromium_net.so] Error 1
/Volumes/untitled/prebuilts/gcc/darwin-x86/arm/arm-linux-androideabi-4.6/bin/../lib/gcc/arm-linux-androideabi/4.6.x-google/../../../../arm-linux-androideabi/bin/ld: fatal error: out/target/product/generic/obj/SHARED_LIBRARIES/libbcc_intermediates/LINKED/libbcc.so: No space left on device
collect2: ld returned 1 exit status
make: *** [out/target/product/generic/obj/SHARED_LIBRARIES/libbcc_intermediates/LINKED/libbcc.so] Error 1
</code></pre>

<p>解决：</p>

<p>执行 df －li 查看 iused  我的在untitled 显示100%</p>

<pre><code>povolmatoMacBook-Pro:untitled povol$ df -li 
Filesystem   512-blocks      Used Available Capacity  iused    ifree %iused  Mounted on
/dev/disk0s2  777343744 450761888 326069856    59% 56409234 40758732   58%   /
/dev/disk0s4  197748728  82422896 115325832    42%   183830 57683118    0%   /Volumes/BOOTCAMP
/dev/disk1      8388608   1611096   6777512    20%   201385   847189   19%   /Volumes/RamDisk

/dev/disk3s2   83214256  83193528     20728   100% 10399189     2591  100%   /Volumes/untitled
</code></pre>

<p>所以提示 No space left on device</p>

<p>重新启动了mac之后</p>

<pre><code>povolmatoMacBook-Pro:android povol$ df -li 
Filesystem   512-blocks      Used Available Capacity  iused    ifree %iused  Mounted on
/dev/disk0s2  777343744 482859288 293972456    63% 60421409 36746557   62%   /

/dev/disk0s4  197748728  82422896 115325832    42%   183830 57683118    0%   /Volumes/BOOTCAMP

/dev/disk1      8388608     73632   8314976     1%     9202  1039372    1%   /Volumes/RamDisk

/dev/disk3s2   83214256  50383960  32830296    61%  6297993  4103787   61%   /Volumes/untitled
</code></pre>

<p>这次显示／Volumes/untitled iused 为61% 接着运行 make
编译成功 。</p>

<p> <br/></p>

<hr />

<h3>错误 4</h3>

<p>qemu: could not load initrd 'ramdisk.img'，</p>

<p>直接参数-ramdisk ramdisk.img去掉，结果模拟器跑起来了，是运行出窗口后，就是黑屏。</p>

<p>换下kernel，用./prebuilts/qemu-kernel/arm/kernel-qemu-armv7，之后运行成功 。</p>

<br/><br/><br/>



]]></content>
  </entry>
  
</feed>
