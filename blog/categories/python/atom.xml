<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Python | Janrone's Blog]]></title>
  <link href="http://janrone.github.com/blog/categories/python/atom.xml" rel="self"/>
  <link href="http://janrone.github.com/"/>
  <updated>2014-09-19T00:45:35+08:00</updated>
  <id>http://janrone.github.com/</id>
  <author>
    <name><![CDATA[Janrone]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Think Python]]></title>
    <link href="http://janrone.github.com/blog/2013/04/14/think-python/"/>
    <updated>2013-04-14T20:18:00+08:00</updated>
    <id>http://janrone.github.com/blog/2013/04/14/think-python</id>
    <content type="html"><![CDATA[<h2>Chapter 1</h2>

<h2><em>The way of the program</em></h2>

<h3>1. The Python programming language</h3>

<ul>
<li>Python is an example of a <strong>high-level language</strong> .</li>
<li>There are also <strong>low-level language</strong>.</li>
<li>Computers can only run programs writter in low-level-language. So program written in a high-level language have to be processed before the can run .</li>
<li>Two kinds of programs preocess high-level language into low-level languages:<strong>interpreters</strong> and <strong>compilers</strong>.</li>
<li>Python is considered an interpreted language because Python programs are executed by an interpreter.</li>
</ul>


<h3>2. What is a program ?</h3>

<ul>
<li><p>A <strong>program</strong> is a sequence of instrucations that specifies how to preform a computation.</p>

<p>  base instrucations</p>

<pre><code>  input 
  output
  math
  conditionan execution
  repetition
</code></pre>

<p>  algorithms.</p>

<p>  <!--more--></p></li>
</ul>


<h3>3. What is debugging ?</h3>

<p>Program errors are called  <strong>bugs</strong> and the process of tracking the down is callede <strong>debugging</strong>.<br/>
Three kinds of errors can occur in a program:</p>

<ul>
<li>Syntax errors.</li>
<li>Runtime errors.</li>
<li>Semantic errors.</li>
</ul>


<h3>4. Formal and natural languages</h3>

<ul>
<li>Natural languages are the language people speak.</li>
<li>Formal languages are language the are designed by people for specific applications.<br/>
  <strong>Programming languages are formal languages that have been designed to express computations.</strong></li>
</ul>


<h3>5. The first program</h3>

<p>In Python 3 , display the words "Hello World !"</p>

<pre><code>&gt;&gt;&gt; print('Hello World!')
Hello world
&gt;&gt;&gt; 
</code></pre>

<h2>Chapter 2</h2>

<h2><em>Variables, expressions and statements</em></h2>

<h3>1. Valuse and types</h3>

<p>if you are not sure what type a values has,  the interpreter can tell you.</p>

<pre><code>&gt;&gt;&gt; type('Hello Hoo')
&lt;type 'str'&gt;
&gt;&gt;&gt; type('2')
&lt;type 'str'&gt;
&gt;&gt;&gt; type(2)
&lt;type 'int'&gt;
&gt;&gt;&gt; type(2.222)
&lt;type 'float'&gt;
&gt;&gt;&gt; mile = 30   
&gt;&gt;&gt; type(mile)
&lt;type 'int'&gt;
&gt;&gt;&gt; 
</code></pre>

<h5>types: int, str, float .</h5>

<h3>2. Variables</h3>

<p>An assignment statement creates new variables and gives the values:</p>

<pre><code>&gt;&gt;&gt; name = "hoo"
&gt;&gt;&gt; name = 'hoo'
&gt;&gt;&gt; i = 15
&gt;&gt;&gt; j = 13.11
&gt;&gt;&gt; 
</code></pre>

<h3>3. Variable names and keywords</h3>

<ul>
<li>Variable names can be arbitrarily long.</li>
<li>They can contain both letters and numbers,but they have to begin with a letter.</li>
<li>It is a good idea to begin variable names with a lowercse letter than uppercase letter.</li>
<li>The underscore character,_,can appear in a name often used in namse with multiple words, such  as my_name or type_of_value.</li>
<li>Keywords cannot be used variable names.</li>
</ul>


<p>if you giva a variable an illegal name, you get a sytax error.</p>

<p>Python 2 has 31 keywords:</p>

<table>
<thead>
<tr>
<th> and  </th>
<th>  del </th>
<th> from  </th>
<th> not  </th>
<th> while</th>
</tr>
</thead>
<tbody>
<tr>
<td> as   </td>
<td> elif </td>
<td> global</td>
<td> or   </td>
<td> with</td>
</tr>
<tr>
<td>assert</td>
<td>esle  </td>
<td>   if  </td>
<td> pass </td>
<td> yield</td>
</tr>
<tr>
<td>break </td>
<td>except</td>
<td>import </td>
<td> print</td>
<td> class</td>
</tr>
<tr>
<td>exec  </td>
<td> in   </td>
<td> raise </td>
<td> continue</td>
<td>finally</td>
</tr>
<tr>
<td>is  </td>
<td> return </td>
<td> def </td>
<td> for </td>
<td> lambda </td>
</tr>
<tr>
<td> try</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody>
</table>


<p>In Python 3, <strong>exec</strong> is no longer a keyword, but  <strong>nonlocal</strong>  is.</p>

<h3>4. Operators and operands</h3>

<p>The operators +, _, *, /, and ** peform addition, subtraction, multiplication, division and exponentiation .</p>

<p>eg:  <em>20+31,   4-1, 5*2, 6/2, 5**2</em></p>

<pre><code>&gt;&gt;&gt; 5*2
10
&gt;&gt;&gt; 5**2
25
</code></pre>

<p>In Python 2</p>

<pre><code>&gt;&gt;&gt; 59/60
0
&gt;&gt;&gt; 
</code></pre>

<h6>The reason for the discrepancy is that Python is performing floor division.</h6>

<p>In Pytion 3</p>

<pre><code>&gt;&gt;&gt; 59/60
0.98333333333333328
&gt;&gt;&gt; 
</code></pre>

<h6>and the new operator <strong>//</strong> performs floor division.</h6>

<p>If either of the operands is a floating-point number, Python preforms floating-point divition, and the result is a float :</p>

<pre><code>&gt;&gt;&gt; 59/60
0.98333333333333328
&gt;&gt;&gt; 
</code></pre>

<h3>5. Expressions and statements</h3>

<ul>
<li>An expression is a combination of values, variables, and operators. eg: x + 17</li>
<li>A statement is a unit of code that the Python interpreter can execute.</li>
</ul>


<h3>6. Interactive mode and script mode</h3>

<ul>
<li>the scripte mode should use 'print' to display the value.</li>
</ul>


<h3>7. String operations</h3>

<p> The + operator wokrs wiht strings, it performs concatenation, which means joining the strings by linking the end-to-end.</p>

<pre><code>&gt;&gt;&gt; first = 'bed'
&gt;&gt;&gt; second ='room'
&gt;&gt;&gt; first + second
'bedroom'
&gt;&gt;&gt; 
</code></pre>

<p>The * operator also wokrs on stirngs; it performs repetition .</p>

<pre><code>&gt;&gt;&gt; sound = 'da'
&gt;&gt;&gt; sound * 4
'dadadada'
&gt;&gt;&gt; 
</code></pre>

<h3>8. Comments</h3>

<p>The notes added to your programs called comments, and they start with hte # symobol. These to explain in natural language what the program is doing.</p>

<h2>Chapter 3</h2>

<h2><em>Functions</em></h2>

<h3>1. Function calls</h3>

<p>When you define a function, you specify the name and the sequence of statements. Later, you can "call" the function by name.</p>

<pre><code>&gt;&gt;&gt; type(32)
&lt;type 'int'&gt;
&gt;&gt;&gt; 
</code></pre>

<h3>2. Type conversion functions</h3>

<p>Python provides built-in fuctions that convert values from one type to another.</p>

<pre><code>&gt;&gt;&gt; int('32')
32
&gt;&gt;&gt; int('Hello')
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
ValueError: invalid literal for int() with base 10: 'Hello'
&gt;&gt;&gt; int('3.9999')
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
ValueError: invalid literal for int() with base 10: '3.9999'

&gt;&gt;&gt; int(3.9999)
3
&gt;&gt;&gt; int(2.3)
2

&gt;&gt;&gt; float(32)
32.0
&gt;&gt;&gt; float('3.999')
3.999

&gt;&gt;&gt; str(32)
'32'
&gt;&gt;&gt; str(3.999)
'3.999'
&gt;&gt;&gt; 
</code></pre>

<h3>3. Math functions</h3>

<p>Python has a math module that provides most of the mathematical functions. A module is a file tha contains a collection of related functions.
Before we can use the module, we have to import it:</p>

<pre><code>&gt;&gt;&gt; import math
</code></pre>

<p>This statement creates a module boject named math. If you print the module object, you get some information about it :</p>

<pre><code>&gt;&gt;&gt; print math
&lt;module 'math' from '/System/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/lib-dynload/math.so'&gt;
&gt;&gt;&gt; 

&gt;&gt;&gt; radians = 0.7
&gt;&gt;&gt; height = math.sin(radians)
&gt;&gt;&gt; print height
0.644217687238
&gt;&gt;&gt; 
</code></pre>

<h3>4. Composition</h3>

<p>So far, we have looke at the elements of a program---variables, expressions, and statements---in isolation, whitout talking about how tu combine them.<br/>
For example:</p>

<pre><code>&gt;&gt;&gt; degress = 120
&gt;&gt;&gt; x = math.sin(degress / 360.0 * 2 * math.pi)
&gt;&gt;&gt; print x
0.866025403784
&gt;&gt;&gt; x = math.exp(math.log(x+1))
&gt;&gt;&gt; print x
1.86602540378
&gt;&gt;&gt; minutes = hours * 60


&gt;&gt;&gt; hours = 11
&gt;&gt;&gt; minutes = hours * 60
&gt;&gt;&gt; hours * 60 = minutes
  File "&lt;stdin&gt;", line 1
SyntaxError: can't assign to operator
&gt;&gt;&gt; 
</code></pre>

<h3>5. Add new founctions</h3>

<p>A fouction definiton specifies the name of a new function and the sequence of statements that execute when the function is called.<br/>
Here is example:</p>

<pre><code>&gt;&gt;&gt; def print_lyrice():
...     print "I'm a lumberjack, and I'm okay."
...     print "I sleep all night and I work all day."
... 
</code></pre>

<p> def is a keyword that indicates that this is a function definiton. The name of functions is print_lyrice. <br/>
 The first line of the function is called the <strong>header</strong>. the rest is called the <strong>body</strong>. The header has to end with a colon and the body has to be indented.<br/>
 To end the function, you have to enter an empty line(this is not necessary in a script).</p>

<pre><code>&gt;&gt;&gt; print print_lyrice
&lt;function print_lyrice at 0x108f77cf8&gt;
&gt;&gt;&gt; type(print_lyrice)
&lt;type 'function'&gt;
&gt;&gt;&gt; 
</code></pre>

<h3>6. Definitions and uses</h3>

<pre><code>&gt;&gt;&gt; print_lyrice()
I'm a lumberjack, and I'm okay.
I sleep all night and I work all day.
&gt;&gt;&gt; 
</code></pre>

<h3>7. Flow of execution</h3>

<p>Execution always begins at the first statement of the program. Statements are executed on at a time, in order from top to bottom.<br/>
Function definitions do not alter the flow of execution of the programe, but remember that statements inside the function are not executed until the function is called.</p>

<h3>8. Parameters and arguments</h3>

<p>Inside the function, the arguments are assigned to variables called parameters.</p>

<pre><code>&gt;&gt;&gt; def print_twice(bruce):
...     print bruce
...     print bruce
... 
&gt;&gt;&gt; print_twice('Spam')
Spam
Spam
&gt;&gt;&gt; 
</code></pre>

<p>This function assigns the argument to a parameter named bruce, When the function is called, if print the value of the parameter(whatever it is)twice.</p>

<h3>9. Variables and parameters are local</h3>

<p>When you create a variable inside a function, it is <strong>local</strong>, which means that it only exists inside the function.</p>

<h3>10. Stack diagrams</h3>

<p>To keep track of which variables can be used where, it is sometimes useful to draw a <strong>stack diagram</strong>.</p>

<p>Each function is represented by a <strong>frame</strong>. A frame is a box whit the name of function bedide it and the parameters and variable of the fanction inside it.</p>

<p>The frames are arranged in a stack that indicates which function called whicn, and so on.</p>

<h3>11. Fruitful functions and void functions</h3>

<p>Some of the functions we are using, such as the math functions, yield resulets; for lack of a batter name, I call the <strong>fruitful functions</strong>. Other functions, like print_twice, preform an actions but don't return a value. They are called <strong>void functions</strong>.</p>

<p>If you try to assign the result to variable, you get a special value called None.</p>

<pre><code>&gt;&gt;&gt; result = print_twice('Bing')
Bing
Bing
&gt;&gt;&gt; print result
None
</code></pre>

<p>The value None is not the same as the string 'None'. It is a special value that has its own type.</p>

<pre><code>&gt;&gt;&gt; print type(None)
&lt;type 'NoneType'&gt;
</code></pre>

<h3>12. Why functions ?</h3>

<p>It may not be clear why it is worth the trouble to divide a program into functions. There are several reasons:/Users/povol</p>

<ul>
<li><p>Creating a new function gives you an opporunity to name a group of statements, which make your program easier to read and debug.</p></li>
<li><p>Functions can make a program smaller by eliminating repetitive code. Later, if you make a change, you have to make it in one place.</p></li>
<li>Dividing a long program into functions allows you to debug the parts one at a time ande then assemble them into a working whole.</li>
<li>Well-designed functions are often useful for mamy programs. Once you write and debug one, you can reuse it.</li>
</ul>


<h3>13. Importing with form</h3>

<p>Python provider two ways to import modules; we have already seen one:</p>

<pre><code>&gt;&gt;&gt; import math
&gt;&gt;&gt; print math
&lt;module 'math' from '/System/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/lib-dynload/math.so'&gt;
&gt;&gt;&gt; print math.pi
3.14159265359
&gt;&gt;&gt; 
</code></pre>

<p>If you import math, you get a module object name math. The module object contains constants like pi and functions like sin and exp.</p>

<p>But if you try access pi directly, you get an error.</p>

<pre><code>&gt;&gt;&gt; print pi
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
NameError: name 'pi' is not defined
&gt;&gt;&gt; 
</code></pre>

<p>As an alternative, you can import an object from a module like this:</p>

<pre><code>&gt;&gt;&gt; from math import pi
</code></pre>

<p>Now you can access pi directly, whitout dot notaion.</p>

<pre><code>&gt;&gt;&gt; print pi
3.14159265359   
&gt;&gt;&gt; 
</code></pre>

<p>Or you can use the star operator to import everything from the module:</p>

<pre><code>&gt;&gt;&gt; from math import *
&gt;&gt;&gt; cos(pi)
-1.0
&gt;&gt;&gt;     
</code></pre>

<h2>Chapter 4</h2>

<h2><em>Case study: interface design</em></h2>

<h3>1.</h3>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[在Android上搭建Python环境]]></title>
    <link href="http://janrone.github.com/blog/2013/04/09/zai-androidshang-da-jian-pythonhuan-jing/"/>
    <updated>2013-04-09T14:00:00+08:00</updated>
    <id>http://janrone.github.com/blog/2013/04/09/zai-androidshang-da-jian-pythonhuan-jing</id>
    <content type="html"><![CDATA[<h3>1.下载和安装 Scripting Layer for Android (SL4A)</h3>

<p>Scripting Layer for Android (SL4A) 是一个开源项目，目标是为android系统提供脚本语言的支持，使用户可以直接在android平台上进行脚本语言的编辑、解释和执行。这些脚本语言已 经可是使用很多封装好的android API来开发功能丰富的android应用程序，并且使开发变得更加的简单和高效!
这个平台支持多种脚本语言，比如 Python, Perl, JRuby, Lua, BeanShell, JavaScript, Tcl, shell 等，你可以选择你熟悉的语言进行开发，本系列教程使用Python为编程脚本语言。
SL4A项目的地址: <a href="http://code.google.com/p/android-scripting/">http://code.google.com/p/android-scripting/</a></p>

<h3>2.下载和安装 Python for android</h3>

<p>在项目主页面的右上方，有该应用支持的所有脚本语言的下载列表，如下图所示;</p>

<p> <img src="/images/post/2013-04-09-01.png" alt="" /></p>

<p> <!--more--></p>

<p>选择你使用的语言，打开相应的语言环境的下载页面，与下载SL4A的方式类似，将该语言包应用下载并安装到你的手机上。</p>

<p>或者直接去Python for android项目地址 <a href="https://code.google.com/p/python-for-android/">https://code.google.com/p/python-for-android/</a> 下载</p>

<p>程序安装完成后，打开Python for Android应用，在应用的最上方会有一个Install的按钮，点击该按钮，就会自动下载Python相关的文件并解压和安装，这个过程结束后，你的android手机上的Python开发环境就配置好了！</p>

<p>多两个应用 ，如图</p>

<p> <img src="/images/post/20130409115645.png" alt="" /></p>

<h3>3.脚本模式 第一个HelloWorld程序</h3>

<p>打开SL4A应用，会进入Python示例代码列表，基本上是对主要API的演示，部分示例可能由于偏老，运行时会提示方法过期或者运行异常的问题，这个至少修改少许代码即可，有机会的话，我会在后续课程中介绍这是示例以及修正的方法。
点Menu键，然后点击Add，选择Python2.6.2，就会新建一个Python脚本文件，将文件的名字命名为：HelloPythonInAndroid.py
点击屏幕进入脚本编辑区，开始输入如下内容：</p>

<p>import android
droid = android.Android()
droid.makeToast(‘Hello, Python in Android’）</p>

<p>输入完成后，如下图所示:</p>

<p>点击Menu，选择Save&amp;Run，恭喜你，你已经用Python完成了第一个Android应用：HelloPythonInAndroid!</p>

<h3>4.交互模式 Python命令行，第一个HelloWorld程序</h3>

<p>1.打开SL4A，点击menu按钮，点击view 选择interpreters,如图</p>

<p> <img src="/images/post/20130409121629.png" alt="" /></p>

<p> <img src="/images/post/20130409120507.jpg" alt="" /></p>

<p>2.点击interpreters按钮，选择Pythonx.x.x 即可进入python命令行,如图</p>

<p>  <img src="/images/post/20130409120537.png" alt="" /></p>

<p>3.在命令行里运行所要编写的代码，这里我们以hello，python world为例！如图</p>

<p> <img src="/images/post/20130409120724.png" alt="" /></p>

<h2>完</h2>
]]></content>
  </entry>
  
</feed>
